{"version":3,"file":"query-cache.js","names":["nextTick","now","requestIdlePromise","QueryCache","_map","Map","getByQuery","rxQuery","stringRep","toString","has","set","get","createQueryCache","uncacheRxQuery","queryCache","uncached","delete","countRxQuerySubscribers","refCount$","observers","length","DEFAULT_TRY_TO_KEEP_MAX","DEFAULT_UNEXECUTED_LIFETME","defaultCacheReplacementPolicyMonad","tryToKeepMax","unExecutedLifetime","_collection","size","minUnExecutedLifetime","maybeUncash","queriesInCache","Array","from","values","_lastEnsureEqual","_creationTime","push","mustUncache","sortedByLastUsage","sort","a","b","toRemove","slice","forEach","defaultCacheReplacementPolicy","COLLECTIONS_WITH_RUNNING_CLEANUP","WeakSet","triggerCacheReplacement","rxCollection","add","then","destroyed","cacheReplacementPolicy","_queryCache"],"sources":["../../src/query-cache.ts"],"sourcesContent":["/**\n * the query-cache makes sure that on every query-state, exactly one instance can exist\n * if you use the same mango-query more then once, it will reuse the first RxQuery\n */\nimport type {\n    RxQuery,\n    RxCacheReplacementPolicy,\n    RxCollection\n} from './types';\nimport {\n    nextTick,\n    now,\n    requestIdlePromise\n} from './plugins/utils';\n\nexport class QueryCache {\n    public _map: Map<string, RxQuery> = new Map();\n\n    /**\n     * check if an equal query is in the cache,\n     * if true, return the cached one,\n     * if false, save the given one and return it\n     */\n    getByQuery(rxQuery: RxQuery): RxQuery {\n        const stringRep = rxQuery.toString();\n        if (!this._map.has(stringRep)) {\n            this._map.set(stringRep, rxQuery);\n        }\n        return this._map.get(stringRep) as RxQuery;\n    }\n}\n\nexport function createQueryCache() {\n    return new QueryCache();\n}\n\n\nexport function uncacheRxQuery(queryCache: QueryCache, rxQuery: RxQuery) {\n    rxQuery.uncached = true;\n    const stringRep = rxQuery.toString();\n    queryCache._map.delete(stringRep);\n\n}\n\n\nexport function countRxQuerySubscribers(rxQuery: RxQuery): number {\n    return rxQuery.refCount$.observers.length;\n}\n\n\nexport const DEFAULT_TRY_TO_KEEP_MAX = 100;\nexport const DEFAULT_UNEXECUTED_LIFETME = 30 * 1000;\n\n/**\n * The default cache replacement policy\n * See docs-src/query-cache.md to learn how it should work.\n * Notice that this runs often and should block the cpu as less as possible\n * This is a monad which makes it easier to unit test\n */\nexport const defaultCacheReplacementPolicyMonad: (\n    tryToKeepMax: number,\n    unExecutedLifetime: number\n) => RxCacheReplacementPolicy = (\n    tryToKeepMax,\n    unExecutedLifetime\n) => (\n    _collection: RxCollection,\n    queryCache: QueryCache\n) => {\n    if (queryCache._map.size < tryToKeepMax) {\n        return;\n    }\n\n    const minUnExecutedLifetime = now() - unExecutedLifetime;\n    const maybeUncash: RxQuery[] = [];\n\n    const queriesInCache = Array.from(queryCache._map.values());\n    for (const rxQuery of queriesInCache) {\n        // filter out queries with subscribers\n        if (countRxQuerySubscribers(rxQuery) > 0) {\n            continue;\n        }\n        // directly uncache queries that never executed and are older then unExecutedLifetime\n        if (rxQuery._lastEnsureEqual === 0 && rxQuery._creationTime < minUnExecutedLifetime) {\n            uncacheRxQuery(queryCache, rxQuery);\n            continue;\n        }\n        maybeUncash.push(rxQuery);\n    }\n\n    const mustUncache = maybeUncash.length - tryToKeepMax;\n    if (mustUncache <= 0) {\n        return;\n    }\n\n    const sortedByLastUsage = maybeUncash.sort((a, b) => a._lastEnsureEqual - b._lastEnsureEqual);\n    const toRemove = sortedByLastUsage.slice(0, mustUncache);\n    toRemove.forEach(rxQuery => uncacheRxQuery(queryCache, rxQuery));\n};\n\n\nexport const defaultCacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicyMonad(\n    DEFAULT_TRY_TO_KEEP_MAX,\n    DEFAULT_UNEXECUTED_LIFETME\n);\n\nexport const COLLECTIONS_WITH_RUNNING_CLEANUP: WeakSet<RxCollection> = new WeakSet();\n\n/**\n * Triggers the cache replacement policy after waitTime has passed.\n * We do not run this directly because at exactly the time a query is created,\n * we need all CPU to minimize latency.\n * Also this should not be triggered multiple times when waitTime is still waiting.\n */\nexport function triggerCacheReplacement(\n    rxCollection: RxCollection\n) {\n    if (COLLECTIONS_WITH_RUNNING_CLEANUP.has(rxCollection)) {\n        // already started\n        return;\n    }\n\n    COLLECTIONS_WITH_RUNNING_CLEANUP.add(rxCollection);\n\n    /**\n     * Do not run directly to not reduce result latency of a new query\n     */\n    nextTick() // wait at least one tick\n        .then(() => requestIdlePromise(200)) // and then wait for the CPU to be idle\n        .then(() => {\n            if (!rxCollection.destroyed) {\n                rxCollection.cacheReplacementPolicy(rxCollection, rxCollection._queryCache);\n            }\n            COLLECTIONS_WITH_RUNNING_CLEANUP.delete(rxCollection);\n        });\n}\n"],"mappings":"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"}