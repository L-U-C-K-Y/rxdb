{"version":3,"file":"upstream.js","names":["firstValueFrom","filter","stackCheckpoints","batchArray","ensureNotFalsy","parseRevision","PROMISE_RESOLVE_FALSE","getLastCheckpointDoc","setCheckpoint","resolveConflictError","writeDocToDocState","getAssumedMasterState","getMetaWriteRow","startReplicationUpstream","state","replicationHandler","input","streamQueue","up","then","upstreamInitialSync","processTasks","timer","initialSyncStartTime","openTasks","sub","forkInstance","changeStream","pipe","eventBulk","context","downstreamBulkWriteFlag","subscribe","stats","forkChangeStreamEmit","push","task","time","waitBeforePersist","events","canceled","unsubscribe","getValue","checkpointQueue","lastCheckpoint","promises","upResult","getChangedDocumentsSince","pushBatchSize","documents","length","checkpoint","persistToMaster","resolvedPromises","Promise","all","hadConflicts","find","r","firstSyncDone","next","active","docs","taskWithTime","shift","concat","map","documentData","promise","persistenceQueue","nonPersistedFromMaster","forEach","docData","docId","primaryPath","upDocsById","useCheckpoint","docIds","Object","keys","assumedMasterState","writeRowsToMaster","writeRowsToMasterIds","writeRowsToMeta","forkStateById","fullDocData","assumedMasterDoc","metaDocument","isResolvedConflict","_rev","conflictHandler","realMasterState","newDocumentState","isEqual","height","_meta","identifier","undefined","writeRowsArray","values","conflictIds","Set","conflictsById","writeBatches","writeBatch","masterWriteResult","masterWrite","conflictDoc","id","add","useWriteRowsToMeta","has","processed","metaInstance","bulkWrite","hadConflictWrites","size","persistToMasterHadConflicts","conflictWriteFork","conflictWriteMeta","entries","writeToMasterRow","resolved","resolvedConflicts","output","previous","document","resolvedDoc","persistToMasterConflictWrites","forkWriteResult","useMetaWrites","success","catch","unhandledError","error"],"sources":["../../../src/replication-protocol/upstream.ts"],"sourcesContent":["import { firstValueFrom, filter } from 'rxjs';\nimport { stackCheckpoints } from '../rx-storage-helper';\nimport type {\n    BulkWriteRow,\n    BulkWriteRowById,\n    ById,\n    EventBulk,\n    RxDocumentData,\n    RxReplicationWriteToMasterRow,\n    RxStorageChangeEvent,\n    RxStorageInstanceReplicationState,\n    RxStorageReplicationMeta,\n    WithDeleted\n} from '../types';\nimport {\n    batchArray,\n    ensureNotFalsy,\n    parseRevision,\n    PROMISE_RESOLVE_FALSE\n} from '../plugins/utils';\nimport {\n    getLastCheckpointDoc,\n    setCheckpoint\n} from './checkpoint';\nimport { resolveConflictError } from './conflicts';\nimport { writeDocToDocState } from './helper';\nimport {\n    getAssumedMasterState,\n    getMetaWriteRow\n} from './meta-instance';\n\n/**\n * Writes all document changes from the fork to the master.\n * The upstream runs on two modes:\n * - For initial replication, a checkpoint-iteration is used\n * - For ongoing local writes, we just subscribe to the changeStream of the fork.\n *   In contrast to the master, the fork can be assumed to never loose connection,\n *   so we do not have to prepare for missed out events.\n */\nexport function startReplicationUpstream<RxDocType, CheckpointType>(\n    state: RxStorageInstanceReplicationState<RxDocType>\n) {\n    const replicationHandler = state.input.replicationHandler;\n    state.streamQueue.up = state.streamQueue.up.then(() => {\n        return upstreamInitialSync().then(() => {\n            processTasks();\n        });\n    });\n\n    // used to detect which tasks etc can in it at which order.\n    let timer = 0;\n    let initialSyncStartTime = -1;\n\n    type Task = EventBulk<RxStorageChangeEvent<RxDocType>, any>;\n    type TaskWithTime = {\n        task: Task;\n        time: number;\n    };\n    const openTasks: TaskWithTime[] = [];\n\n\n    const sub = state.input.forkInstance.changeStream()\n        .pipe(\n            filter(eventBulk => eventBulk.context !== state.downstreamBulkWriteFlag)\n        ).subscribe(eventBulk => {\n            state.stats.up.forkChangeStreamEmit = state.stats.up.forkChangeStreamEmit + 1;\n            openTasks.push({\n                task: eventBulk,\n                time: timer++\n            });\n            if (state.input.waitBeforePersist) {\n                return state.input.waitBeforePersist()\n                    .then(() => processTasks());\n            } else {\n                return processTasks();\n            }\n        });\n    firstValueFrom(\n        state.events.canceled.pipe(\n            filter(canceled => !!canceled)\n        )\n    ).then(() => sub.unsubscribe());\n\n\n    async function upstreamInitialSync() {\n        state.stats.up.upstreamInitialSync = state.stats.up.upstreamInitialSync + 1;\n        if (state.events.canceled.getValue()) {\n            return;\n        }\n\n        state.checkpointQueue = state.checkpointQueue.then(() => getLastCheckpointDoc(state, 'up'));\n        let lastCheckpoint: CheckpointType = await state.checkpointQueue;\n\n        const promises: Promise<any>[] = [];\n        while (!state.events.canceled.getValue()) {\n            initialSyncStartTime = timer++;\n            const upResult = await state.input.forkInstance.getChangedDocumentsSince(\n                state.input.pushBatchSize,\n                lastCheckpoint\n            );\n            if (upResult.documents.length === 0) {\n                break;\n            }\n\n            lastCheckpoint = stackCheckpoints([lastCheckpoint, upResult.checkpoint]);\n\n            promises.push(\n                persistToMaster(\n                    upResult.documents,\n                    ensureNotFalsy(lastCheckpoint)\n                )\n            );\n        }\n\n        /**\n         * If we had conflicts during the initial sync,\n         * it means that we likely have new writes to the fork\n         * and so we have to run the initial sync again to upstream these new writes.\n         */\n        const resolvedPromises = await Promise.all(promises);\n        const hadConflicts = resolvedPromises.find(r => !!r);\n        if (hadConflicts) {\n            await upstreamInitialSync();\n        } else if (!state.firstSyncDone.up.getValue()) {\n            state.firstSyncDone.up.next(true);\n        }\n    }\n\n\n    /**\n     * Takes all open tasks an processes them at once.\n     */\n    function processTasks() {\n        if (\n            state.events.canceled.getValue() ||\n            openTasks.length === 0\n        ) {\n            state.events.active.up.next(false);\n            return;\n        }\n        state.stats.up.processTasks = state.stats.up.processTasks + 1;\n        state.events.active.up.next(true);\n        state.streamQueue.up = state.streamQueue.up.then(() => {\n            /**\n             * Merge/filter all open tasks\n             */\n            let docs: RxDocumentData<RxDocType>[] = [];\n            let checkpoint: CheckpointType = {} as any;\n            while (openTasks.length > 0) {\n                const taskWithTime = ensureNotFalsy(openTasks.shift());\n                /**\n                 * If the task came in before the last time the initial sync fetching\n                 * has run, we can ignore the task because the initial sync already processed\n                 * these documents.\n                 */\n                if (taskWithTime.time < initialSyncStartTime) {\n                    continue;\n                }\n\n                docs = docs.concat(\n                    taskWithTime.task.events.map(r => {\n                        return r.documentData as any;\n                    })\n                );\n                checkpoint = stackCheckpoints([checkpoint, taskWithTime.task.checkpoint]);\n            }\n\n            const promise = docs.length === 0 ? PROMISE_RESOLVE_FALSE : persistToMaster(\n                docs,\n                checkpoint\n            );\n            return promise.then(() => {\n                if (openTasks.length === 0) {\n                    state.events.active.up.next(false);\n                } else {\n                    processTasks();\n                }\n            });\n        });\n    }\n\n    let persistenceQueue: Promise<boolean> = PROMISE_RESOLVE_FALSE;\n    const nonPersistedFromMaster: {\n        checkpoint?: CheckpointType;\n        docs: ById<RxDocumentData<RxDocType>>;\n    } = {\n        docs: {}\n    };\n\n    /**\n     * Returns true if had conflicts,\n     * false if not.\n     */\n    function persistToMaster(\n        docs: RxDocumentData<RxDocType>[],\n        checkpoint: CheckpointType\n    ): Promise<boolean> {\n        state.stats.up.persistToMaster = state.stats.up.persistToMaster + 1;\n\n        /**\n         * Add the new docs to the non-persistend list\n         */\n        docs.forEach(docData => {\n            const docId: string = (docData as any)[state.primaryPath];\n            nonPersistedFromMaster.docs[docId] = docData;\n        });\n        nonPersistedFromMaster.checkpoint = checkpoint;\n\n\n        persistenceQueue = persistenceQueue.then(async () => {\n            if (state.events.canceled.getValue()) {\n                return false;\n            }\n\n            const upDocsById: ById<RxDocumentData<RxDocType>> = nonPersistedFromMaster.docs;\n            nonPersistedFromMaster.docs = {};\n            const useCheckpoint = nonPersistedFromMaster.checkpoint;\n            const docIds = Object.keys(upDocsById);\n            if (docIds.length === 0) {\n                return false;\n            }\n\n            const assumedMasterState = await getAssumedMasterState(\n                state,\n                docIds\n            );\n\n            const writeRowsToMaster: ById<RxReplicationWriteToMasterRow<RxDocType>> = {};\n            const writeRowsToMasterIds: string[] = [];\n            const writeRowsToMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n            const forkStateById: ById<RxDocumentData<RxDocType>> = {};\n\n            await Promise.all(\n                docIds.map(async (docId) => {\n                    const fullDocData: RxDocumentData<RxDocType> = upDocsById[docId];\n                    forkStateById[docId] = fullDocData;\n                    const docData: WithDeleted<RxDocType> = writeDocToDocState(fullDocData);\n                    const assumedMasterDoc = assumedMasterState[docId];\n\n                    /**\n                     * If the master state is equal to the\n                     * fork state, we can assume that the document state is already\n                     * replicated.\n                     */\n                    if (\n                        (\n                            assumedMasterDoc &&\n                            // if the isResolvedConflict is correct, we do not have to compare the documents.\n                            assumedMasterDoc.metaDocument.isResolvedConflict !== fullDocData._rev\n                            &&\n                            (await state.input.conflictHandler({\n                                realMasterState: assumedMasterDoc.docData,\n                                newDocumentState: docData\n                            }, 'upstream-check-if-equal')).isEqual\n                        )\n                        ||\n                        /**\n                         * If the master works with _rev fields,\n                         * we use that to check if our current doc state\n                         * is different from the assumedMasterDoc.\n                         */\n                        (\n                            assumedMasterDoc &&\n                            (assumedMasterDoc.docData as any)._rev &&\n                            parseRevision(fullDocData._rev).height === fullDocData._meta[state.input.identifier]\n                        )\n                    ) {\n                        return;\n                    }\n\n                    writeRowsToMasterIds.push(docId);\n\n                    writeRowsToMaster[docId] = {\n                        assumedMasterState: assumedMasterDoc ? assumedMasterDoc.docData : undefined,\n                        newDocumentState: docData\n                    };\n                    writeRowsToMeta[docId] = getMetaWriteRow(\n                        state,\n                        docData,\n                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined\n                    );\n                })\n            );\n\n            if (writeRowsToMasterIds.length === 0) {\n                return false;\n            }\n\n\n            const writeRowsArray = Object.values(writeRowsToMaster);\n            const conflictIds: Set<string> = new Set();\n            const conflictsById: ById<WithDeleted<RxDocType>> = {};\n\n            /**\n             * To always respect the push.batchSize,\n             * we have to split the write rows into batches\n             * to ensure that replicationHandler.masterWrite() is never\n             * called with more documents than what the batchSize limits.\n             */\n            const writeBatches = batchArray(writeRowsArray, state.input.pushBatchSize);\n            await Promise.all(\n                writeBatches.map(async (writeBatch) => {\n                    const masterWriteResult = await replicationHandler.masterWrite(writeBatch);\n                    masterWriteResult.forEach(conflictDoc => {\n                        const id = (conflictDoc as any)[state.primaryPath];\n                        conflictIds.add(id);\n                        conflictsById[id] = conflictDoc;\n                    });\n                })\n            );\n\n\n            const useWriteRowsToMeta: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n\n\n            writeRowsToMasterIds.forEach(docId => {\n                if (!conflictIds.has(docId)) {\n                    state.events.processed.up.next(writeRowsToMaster[docId]);\n                    useWriteRowsToMeta.push(writeRowsToMeta[docId]);\n                }\n            });\n\n            if (useWriteRowsToMeta.length > 0) {\n                await state.input.metaInstance.bulkWrite(\n                    useWriteRowsToMeta,\n                    'replication-up-write-meta'\n                );\n                // TODO what happens when we have conflicts here?\n            }\n\n            /**\n             * Resolve conflicts by writing a new document\n             * state to the fork instance and the 'real' master state\n             * to the meta instance.\n             * Non-409 errors will be detected by resolveConflictError()\n             */\n            let hadConflictWrites = false;\n            if (conflictIds.size > 0) {\n                state.stats.up.persistToMasterHadConflicts = state.stats.up.persistToMasterHadConflicts + 1;\n                const conflictWriteFork: BulkWriteRow<RxDocType>[] = [];\n                const conflictWriteMeta: BulkWriteRowById<RxStorageReplicationMeta> = {};\n                await Promise.all(\n                    Object\n                        .entries(conflictsById)\n                        .map(([docId, realMasterState]) => {\n                            const writeToMasterRow = writeRowsToMaster[docId];\n                            const input = {\n                                newDocumentState: writeToMasterRow.newDocumentState,\n                                assumedMasterState: writeToMasterRow.assumedMasterState,\n                                realMasterState\n                            };\n                            return resolveConflictError(\n                                state,\n                                input,\n                                forkStateById[docId]\n                            ).then(resolved => {\n                                if (resolved) {\n                                    state.events.resolvedConflicts.next({\n                                        input,\n                                        output: resolved.output\n                                    });\n                                    conflictWriteFork.push({\n                                        previous: forkStateById[docId],\n                                        document: resolved.resolvedDoc\n                                    });\n                                    const assumedMasterDoc = assumedMasterState[docId];\n                                    conflictWriteMeta[docId] = getMetaWriteRow(\n                                        state,\n                                        ensureNotFalsy(realMasterState),\n                                        assumedMasterDoc ? assumedMasterDoc.metaDocument : undefined,\n                                        resolved.resolvedDoc._rev\n                                    );\n                                }\n                            });\n                        })\n                );\n\n                if (conflictWriteFork.length > 0) {\n                    hadConflictWrites = true;\n\n                    state.stats.up.persistToMasterConflictWrites = state.stats.up.persistToMasterConflictWrites + 1;\n                    const forkWriteResult = await state.input.forkInstance.bulkWrite(\n                        conflictWriteFork,\n                        'replication-up-write-conflict'\n                    );\n                    /**\n                     * Errors in the forkWriteResult must not be handled\n                     * because they have been caused by a write to the forkInstance\n                     * in between which will anyway trigger a new upstream cycle\n                     * that will then resolved the conflict again.\n                     */\n                    const useMetaWrites: BulkWriteRow<RxStorageReplicationMeta>[] = [];\n                    Object\n                        .keys(forkWriteResult.success)\n                        .forEach((docId) => {\n                            useMetaWrites.push(\n                                conflictWriteMeta[docId]\n                            );\n                        });\n                    if (useMetaWrites.length > 0) {\n                        await state.input.metaInstance.bulkWrite(\n                            useMetaWrites,\n                            'replication-up-write-conflict-meta'\n                        );\n                    }\n                    // TODO what to do with conflicts while writing to the metaInstance?\n                }\n            }\n\n            /**\n             * For better performance we do not await checkpoint writes,\n             * but to ensure order on parallel checkpoint writes,\n             * we have to use a queue.\n             */\n            state.checkpointQueue = state.checkpointQueue.then(() => setCheckpoint(\n                state,\n                'up',\n                useCheckpoint\n            ));\n\n            return hadConflictWrites;\n        }).catch(unhandledError => {\n            state.events.error.next(unhandledError);\n            return false;\n        });\n\n        return persistenceQueue;\n    }\n}\n\n"],"mappings":"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"}