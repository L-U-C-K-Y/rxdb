{"version":3,"file":"rx-local-document.js","names":["distinctUntilChanged","filter","map","shareReplay","startWith","overwritable","getDocumentDataOfRxChangeEvent","basePrototype","createRxDocumentConstructor","newRxError","newRxTypeError","writeSingle","flatClone","getDefaultRevision","getDefaultRxDocumentMeta","getFromMapOrThrow","getFromObjectOrThrow","getProperty","RXJS_SHARE_REPLAY_DEFAULTS","getLocalDocStateByParent","LOCAL_DOC_STATE_BY_PARENT_RESOLVED","RxDocumentParent","RxLocalDocumentClass","id","jsonData","parent","RxLocalDocumentPrototype","isLocal","allAttachments$","document","primaryPath","primary","$","_this","pipe","changeEvent","documentId","_data","prev","curr","_rev","getLatest","state","latestDocData","docCache","getLatestDocumentData","getCachedRxDocument","get","objPath","undefined","valueObj","deepFreezeWhenDevMode","get$","isDevMode","includes","data","incrementalModify","mutationFunction","incrementalWriteQueue","addWrite","docData","then","result","incrementalPatch","patch","Object","entries","forEach","k","v","_saveData","newData","oldData","storageInstance","bulkWrite","previous","res","docResult","success","error","remove","writeData","_deleted","_meta","_attachments","writeResult","INIT_DONE","_init","docBaseProto","props","getOwnPropertyNames","key","exists","getOwnPropertyDescriptor","desc","defineProperty","getThrowingFun","functionName","createRxLocalDocument","newDoc","setPrototypeOf","prototype"],"sources":["../../../../src/plugins/local-documents/rx-local-document.ts"],"sourcesContent":["import { Observable } from 'rxjs';\nimport {\n    distinctUntilChanged,\n    filter,\n    map,\n    shareReplay,\n    startWith\n} from 'rxjs/operators';\nimport { overwritable } from '../../overwritable';\nimport { getDocumentDataOfRxChangeEvent } from '../../rx-change-event';\nimport {\n    basePrototype,\n    createRxDocumentConstructor\n} from '../../rx-document';\nimport {\n    newRxError,\n    newRxTypeError\n} from '../../rx-error';\nimport { writeSingle } from '../../rx-storage-helper';\nimport type {\n    LocalDocumentModifyFunction,\n    RxCollection,\n    RxDatabase,\n    RxDocument,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxLocalDocument,\n    RxLocalDocumentData\n} from '../../types';\nimport {\n    flatClone,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    getFromMapOrThrow,\n    getFromObjectOrThrow,\n    getProperty,\n    RXJS_SHARE_REPLAY_DEFAULTS\n} from '../../plugins/utils';\nimport { getLocalDocStateByParent, LOCAL_DOC_STATE_BY_PARENT_RESOLVED } from './local-documents-helper';\n\nconst RxDocumentParent = createRxDocumentConstructor() as any;\n\nclass RxLocalDocumentClass<DocData = any> extends RxDocumentParent {\n    constructor(\n        public readonly id: string,\n        jsonData: DocData,\n        public readonly parent: RxCollection | RxDatabase\n    ) {\n        super(null, jsonData);\n    }\n}\n\n\n\nconst RxLocalDocumentPrototype: any = {\n    get isLocal() {\n        return true;\n    },\n\n    //\n    // overwrites\n    //\n    get allAttachments$() {\n        // this is overwritten here because we cannot re-set getters on the prototype\n        throw newRxError('LD1', {\n            document: this\n        });\n    },\n    get primaryPath() {\n        return 'id';\n    },\n    get primary() {\n        return this.id;\n    },\n    get $(): Observable<RxDocumentData<RxLocalDocumentData>> {\n        const _this: RxLocalDocumentClass = this as any;\n        return _this.parent.$.pipe(\n            filter(changeEvent => changeEvent.isLocal),\n            filter(changeEvent => changeEvent.documentId === this.primary),\n            map(changeEvent => getDocumentDataOfRxChangeEvent(changeEvent)),\n            startWith(this._data),\n            distinctUntilChanged((prev, curr) => prev._rev === curr._rev),\n            shareReplay(RXJS_SHARE_REPLAY_DEFAULTS)\n        );\n    },\n    getLatest(this: RxLocalDocument<any>): RxLocalDocument<any> {\n        const state = getFromMapOrThrow(LOCAL_DOC_STATE_BY_PARENT_RESOLVED, this.parent);\n        const latestDocData = state.docCache.getLatestDocumentData(this.primary);\n        return state.docCache.getCachedRxDocument(latestDocData) as any;\n    },\n    get(this: RxDocument, objPath: string) {\n        objPath = 'data.' + objPath;\n\n        if (!this._data) {\n            return undefined;\n        }\n        if (typeof objPath !== 'string') {\n            throw newRxTypeError('LD2', {\n                objPath\n            });\n        }\n\n        let valueObj = getProperty(this._data, objPath);\n        valueObj = overwritable.deepFreezeWhenDevMode(valueObj);\n        return valueObj;\n    },\n    get$(this: RxDocument, objPath: string) {\n        objPath = 'data.' + objPath;\n\n        if (overwritable.isDevMode()) {\n            if (objPath.includes('.item.')) {\n                throw newRxError('LD3', {\n                    objPath\n                });\n            }\n            if (objPath === this.primaryPath) {\n                throw newRxError('LD4');\n            }\n        }\n        return this.$\n            .pipe(\n                map(data => getProperty(data, objPath)),\n                distinctUntilChanged()\n            );\n    },\n    async incrementalModify<DocData>(\n        this: RxLocalDocument<any, DocData>,\n        mutationFunction: LocalDocumentModifyFunction<any>\n    ) {\n        const state = await getLocalDocStateByParent(this.parent);\n\n        return state.incrementalWriteQueue.addWrite(\n            this._data as any,\n            async (docData) => {\n                docData.data = await mutationFunction(docData.data, this);\n                return docData;\n            }\n        ).then(result => state.docCache.getCachedRxDocument(result as any));\n    },\n    incrementalPatch(patch: Partial<any>) {\n        return this.incrementalModify((docData: any) => {\n            Object\n                .entries(patch)\n                .forEach(([k, v]) => {\n                    docData[k] = v;\n                });\n            return docData;\n        });\n    },\n    async _saveData(this: RxLocalDocument<any>, newData: RxDocumentData<RxLocalDocumentData>) {\n        const state = await getLocalDocStateByParent(this.parent);\n        const oldData: RxDocumentData<RxLocalDocumentData> = this._data;\n        newData.id = (this as any).id;\n        return state.storageInstance.bulkWrite([{\n            previous: oldData,\n            document: newData\n        }], 'local-document-save-data')\n            .then((res) => {\n                const docResult = res.success[newData.id];\n                if (!docResult) {\n                    throw getFromObjectOrThrow(res.error, newData.id);\n                }\n                newData = flatClone(newData);\n                newData._rev = docResult._rev;\n            });\n    },\n\n    async remove(this: RxLocalDocument<any>): Promise<RxLocalDocument<any>> {\n        const state = await getLocalDocStateByParent(this.parent);\n        const writeData: RxDocumentWriteData<RxLocalDocumentData> = {\n            id: this._data.id,\n            data: {},\n            _deleted: true,\n            _meta: getDefaultRxDocumentMeta(),\n            _rev: getDefaultRevision(),\n            _attachments: {}\n        };\n        return writeSingle(state.storageInstance, {\n            previous: this._data,\n            document: writeData\n        }, 'local-document-remove')\n            .then((writeResult) => state.docCache.getCachedRxDocument(writeResult) as any);\n    }\n};\n\n\n\nlet INIT_DONE = false;\nconst _init = () => {\n    if (INIT_DONE) return;\n    else INIT_DONE = true;\n\n    // add functions of RxDocument\n    const docBaseProto = basePrototype;\n    const props = Object.getOwnPropertyNames(docBaseProto);\n    props.forEach(key => {\n        const exists = Object.getOwnPropertyDescriptor(RxLocalDocumentPrototype, key);\n        if (exists) return;\n        const desc: any = Object.getOwnPropertyDescriptor(docBaseProto, key);\n        Object.defineProperty(RxLocalDocumentPrototype, key, desc);\n    });\n\n\n    /**\n     * Overwrite things that do not work on local documents\n     * with a throwing function.\n     */\n    const getThrowingFun = (k: string) => () => {\n        throw newRxError('LD6', {\n            functionName: k\n        });\n    };\n    [\n        'populate',\n        'update',\n        'putAttachment',\n        'getAttachment',\n        'allAttachments'\n    ].forEach((k: string) => RxLocalDocumentPrototype[k] = getThrowingFun(k));\n};\n\n\n\nexport function createRxLocalDocument<DocData>(\n    data: RxDocumentData<RxLocalDocumentData<DocData>>,\n    parent: any\n): RxLocalDocument<DocData> {\n    _init();\n    const newDoc = new RxLocalDocumentClass(data.id, data, parent);\n    Object.setPrototypeOf(newDoc, RxLocalDocumentPrototype);\n    newDoc.prototype = RxLocalDocumentPrototype;\n    return newDoc as any;\n}\n"],"mappings":"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"}