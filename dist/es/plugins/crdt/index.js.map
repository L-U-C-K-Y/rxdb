{"version":3,"file":"index.js","names":["newRxError","clone","deepEqual","ensureNotFalsy","getProperty","now","objectPathMonad","setProperty","toArray","modifyjs","overwritable","updateCRDT","entry","deepFreezeWhenDevMode","jsonSchema","collection","schema","crdt","queryObj","crdtOptions","storageToken","database","incrementalModify","docData","crdtDocField","field","operation","body","creator","time","lastAr","operations","push","hash","hashCRDTOperations","hashFunction","runOperationOnDocument","storage","statics","RX_CRDT_CONTEXT","insertCRDT","Array","isArray","insertData","result","insert","catch","err","code","doc","findOne","parameters","id","exec","sortOperationComparator","a","b","storageStatics","entryParts","forEach","entryPart","isMatching","selector","preparedQuery","prepareQuery","sort","skip","matcher","getQueryMatcher","ifMatch","ifNotMatch","crdts","hashObj","map","op","JSON","stringify","getCRDTSchemaPart","operationSchema","type","properties","items","additionalProperties","minItems","minimum","maximum","multipleOf","required","minLength","mergeCRDTFields","crdtsA","crdtsB","length","ret","row","index","mergedOps","ids","Set","add","has","rebuildFromCRDT","base","_deleted","getCRDTConflictHandler","crdtField","getCRDTValue","conflictHandler","i","_context","newDocCrdt","newDocumentState","masterDocCrdt","realMasterState","Promise","resolve","isEqual","mergedCrdt","mergedDoc","documentData","RxDBcrdtPlugin","name","rxdb","prototypes","RxDocument","proto","oldRemove","remove","bind","$set","oldincrementalPatch","incrementalPatch","patch","oldincrementalModify","fn","context","primary","args","RxCollection","hooks","preCreateRxCollection","after","data","createRxCollection","getCrdt","isDevMode","bulkWriteBefore","storageInstance","bulkWrite","writes","write","newDocState","document","rebuild","docWithoutMeta","Object","entries","k","v","startsWith","recalculatedHash","bulkInsertBefore","bulkInsert","docsData","useDocsData","setMe","key","value","crdtOperations"],"sources":["../../../../src/plugins/crdt/index.ts"],"sourcesContent":["import { newRxError } from '../../rx-error';\nimport type {\n    CRDTDocumentField,\n    CRDTEntry,\n    CRDTOperation,\n    HashFunction,\n    JsonSchema,\n    RxConflictHandler,\n    RxConflictHandlerInput,\n    RxDocument,\n    RxDocumentData,\n    RxJsonSchema,\n    RxPlugin,\n    RxStorageStatics,\n    WithDeleted\n} from '../../types';\nimport {\n    clone,\n    deepEqual,\n    ensureNotFalsy,\n    getProperty,\n    now,\n    objectPathMonad,\n    setProperty,\n    toArray\n} from '../../plugins/utils';\nimport modifyjs from 'modifyjs';\nimport {\n    overwritable,\n    RxCollection,\n    RxDocumentWriteData,\n    RxError\n} from '../..';\n\n\n\nexport async function updateCRDT<RxDocType>(\n    this: RxDocument<RxDocType>,\n    entry: CRDTEntry<RxDocType> | CRDTEntry<RxDocType>[]\n) {\n    entry = overwritable.deepFreezeWhenDevMode(entry) as any;\n\n    const jsonSchema = this.collection.schema.jsonSchema;\n    if (!jsonSchema.crdt) {\n        throw newRxError('CRDT1', {\n            schema: jsonSchema,\n            queryObj: entry\n        });\n    }\n    const crdtOptions = ensureNotFalsy(jsonSchema.crdt);\n    const storageToken = await this.collection.database.storageToken;\n\n    return this.incrementalModify((docData) => {\n        const crdtDocField: CRDTDocumentField<RxDocType> = clone(getProperty(docData as any, crdtOptions.field));\n        const operation: CRDTOperation<RxDocType> = {\n            body: toArray(entry),\n            creator: storageToken,\n            time: now()\n        };\n\n        /**\n         * A new write will ALWAYS be an operation in the last\n         * array which was non existing before.\n         */\n        const lastAr: CRDTOperation<RxDocType>[] = [operation];\n        crdtDocField.operations.push(lastAr);\n        crdtDocField.hash = hashCRDTOperations(this.collection.database.hashFunction, crdtDocField);\n\n        docData = runOperationOnDocument(\n            this.collection.database.storage.statics,\n            this.collection.schema.jsonSchema,\n            docData,\n            operation\n        );\n        setProperty(docData, crdtOptions.field, crdtDocField);\n        return docData;\n    }, RX_CRDT_CONTEXT);\n}\n\n\nexport async function insertCRDT<RxDocType>(\n    this: RxCollection<RxDocType>,\n    entry: CRDTEntry<RxDocType> | CRDTEntry<RxDocType>[]\n) {\n    entry = overwritable.deepFreezeWhenDevMode(entry) as any;\n\n    const jsonSchema = this.schema.jsonSchema;\n    if (!jsonSchema.crdt) {\n        throw newRxError('CRDT1', {\n            schema: jsonSchema,\n            queryObj: entry\n        });\n    }\n    const crdtOptions = ensureNotFalsy(jsonSchema.crdt);\n    const storageToken = await this.database.storageToken;\n    const operation: CRDTOperation<RxDocType> = {\n        body: Array.isArray(entry) ? entry : [entry],\n        creator: storageToken,\n        time: now()\n    };\n\n    let insertData: RxDocumentWriteData<RxDocType> = {} as any;\n    insertData = runOperationOnDocument(\n        this.database.storage.statics,\n        this.schema.jsonSchema,\n        insertData as any,\n        operation\n    ) as any;\n    const crdtDocField: CRDTDocumentField<RxDocType> = {\n        operations: [],\n        hash: ''\n    };\n    setProperty(insertData as any, crdtOptions.field, crdtDocField);\n\n    const lastAr: CRDTOperation<RxDocType>[] = [operation];\n    crdtDocField.operations.push(lastAr);\n    crdtDocField.hash = hashCRDTOperations(this.database.hashFunction, crdtDocField);\n\n    const result = await this.insert(insertData).catch(async (err: RxError) => {\n        if (err.code === 'CONFLICT') {\n            // was a conflict, update document instead of inserting\n            const doc = await this.findOne(err.parameters.id).exec(true);\n            return doc.updateCRDT(entry);\n        } else {\n            throw err;\n        }\n    });\n    return result;\n}\n\n\nexport function sortOperationComparator<RxDocType>(a: CRDTOperation<RxDocType>, b: CRDTOperation<RxDocType>) {\n    return a.creator > b.creator ? 1 : -1;\n}\n\n\nfunction runOperationOnDocument<RxDocType>(\n    storageStatics: RxStorageStatics,\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    docData: WithDeleted<RxDocType>,\n    operation: CRDTOperation<RxDocType>\n): WithDeleted<RxDocType> {\n    const entryParts = operation.body;\n    entryParts.forEach(entryPart => {\n        let isMatching: boolean;\n        if (entryPart.selector) {\n            const preparedQuery = storageStatics.prepareQuery(schema, {\n                selector: ensureNotFalsy(entryPart.selector),\n                sort: [],\n                skip: 0\n            });\n            const matcher = storageStatics.getQueryMatcher(schema, preparedQuery);\n            isMatching = matcher(docData as any);\n        } else {\n            isMatching = true;\n        }\n        if (isMatching) {\n            if (entryPart.ifMatch) {\n                docData = modifyjs(docData, entryPart.ifMatch);\n            }\n        } else {\n            if (entryPart.ifNotMatch) {\n                docData = modifyjs(docData, entryPart.ifNotMatch);\n            }\n        }\n    });\n    return docData;\n}\n\nexport function hashCRDTOperations(\n    hashFunction: HashFunction,\n    crdts: CRDTDocumentField<any>\n): string {\n    const hashObj = crdts.operations.map((operations) => {\n        return operations.map(op => op.creator);\n    });\n    const hash = hashFunction(JSON.stringify(hashObj));\n    return hash;\n}\n\nexport function getCRDTSchemaPart<RxDocType>(): JsonSchema<CRDTDocumentField<RxDocType>> {\n    const operationSchema: JsonSchema<CRDTOperation<RxDocType>> = {\n        type: 'object',\n        properties: {\n            body: {\n                type: 'array',\n                items: {\n                    type: 'object',\n                    properties: {\n                        selector: {\n                            type: 'object'\n                        },\n                        ifMatch: {\n                            type: 'object'\n                        },\n                        ifNotMatch: {\n                            type: 'object'\n                        }\n                    },\n                    additionalProperties: false\n                },\n                minItems: 1\n            },\n            creator: {\n                type: 'string'\n            },\n            time: {\n                type: 'number',\n                minimum: 1,\n                maximum: 1000000000000000,\n                multipleOf: 0.01\n            }\n        },\n        additionalProperties: false,\n        required: [\n            'body',\n            'creator',\n            'time'\n        ]\n    };\n    return {\n        type: 'object',\n        properties: {\n            operations: {\n                type: 'array',\n                items: {\n                    type: 'array',\n                    items: operationSchema\n                }\n            },\n            hash: {\n                type: 'string',\n                // set a minLength to not accidentally store an empty string\n                minLength: 2\n            }\n        },\n        additionalProperties: false,\n        required: ['operations', 'hash']\n    };\n}\n\n\nexport function mergeCRDTFields<RxDocType>(\n    hashFunction: HashFunction,\n    crdtsA: CRDTDocumentField<RxDocType>,\n    crdtsB: CRDTDocumentField<RxDocType>\n): CRDTDocumentField<RxDocType> {\n\n    // the value with most operations must be A to\n    // ensure we not miss out rows when iterating over both fields.\n    if (crdtsA.operations.length < crdtsB.operations.length) {\n        [crdtsA, crdtsB] = [crdtsB, crdtsA];\n    }\n\n    const ret: CRDTDocumentField<RxDocType> = {\n        operations: [],\n        hash: ''\n    };\n    crdtsA.operations.forEach((row, index) => {\n        let mergedOps: CRDTOperation<RxDocType>[] = [];\n        const ids = new Set<string>(); // used to deduplicate\n\n        row.forEach(op => {\n            ids.add(op.creator);\n            mergedOps.push(op);\n        });\n        if (crdtsB.operations[index]) {\n            crdtsB.operations[index].forEach(op => {\n                if (!ids.has(op.creator)) {\n                    mergedOps.push(op);\n                }\n            });\n        }\n        mergedOps = mergedOps.sort(sortOperationComparator);\n        ret.operations[index] = mergedOps;\n    });\n\n\n    ret.hash = hashCRDTOperations(hashFunction, ret);\n    return ret;\n}\n\nexport function rebuildFromCRDT<RxDocType>(\n    storageStatics: RxStorageStatics,\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>,\n    docData: WithDeleted<RxDocType>,\n    crdts: CRDTDocumentField<RxDocType>\n): WithDeleted<RxDocType> {\n    let base: WithDeleted<RxDocType> = {\n        _deleted: false\n    } as any;\n    setProperty(base, ensureNotFalsy(schema.crdt).field, crdts);\n    crdts.operations.forEach(operations => {\n        operations.forEach(op => {\n            base = runOperationOnDocument(\n                storageStatics,\n                schema,\n                base,\n                op\n            );\n        });\n    });\n    return base;\n}\n\n\nexport function getCRDTConflictHandler<RxDocType>(\n    hashFunction: HashFunction,\n    storageStatics: RxStorageStatics,\n    schema: RxJsonSchema<RxDocumentData<RxDocType>>\n): RxConflictHandler<RxDocType> {\n    const crdtOptions = ensureNotFalsy(schema.crdt);\n    const crdtField = crdtOptions.field;\n    const getCRDTValue = objectPathMonad<WithDeleted<RxDocType>, CRDTDocumentField<RxDocType>>(crdtField);\n\n    const conflictHandler: RxConflictHandler<RxDocType> = (\n        i: RxConflictHandlerInput<RxDocType>,\n        _context: string\n    ) => {\n        const newDocCrdt = getCRDTValue(i.newDocumentState);\n        const masterDocCrdt = getCRDTValue(i.realMasterState);\n\n        if (newDocCrdt.hash === masterDocCrdt.hash) {\n            return Promise.resolve({\n                isEqual: true\n            });\n        }\n\n        const mergedCrdt = mergeCRDTFields(hashFunction, newDocCrdt, masterDocCrdt);\n        const mergedDoc = rebuildFromCRDT(\n            storageStatics,\n            schema,\n            i.newDocumentState,\n            mergedCrdt\n        );\n        return Promise.resolve({\n            isEqual: false,\n            documentData: mergedDoc\n        });\n    };\n\n    return conflictHandler;\n}\n\n\nexport const RX_CRDT_CONTEXT = 'rx-crdt';\n\nexport const RxDBcrdtPlugin: RxPlugin = {\n    name: 'crdt',\n    rxdb: true,\n    prototypes: {\n        RxDocument: (proto: any) => {\n            proto.updateCRDT = updateCRDT;\n\n            const oldRemove = proto.remove;\n            proto.remove = function (this: RxDocument) {\n                if (!this.collection.schema.jsonSchema.crdt) {\n                    return oldRemove.bind(this)();\n                }\n                return this.updateCRDT({\n                    ifMatch: {\n                        $set: {\n                            _deleted: true\n                        }\n                    }\n                });\n            };\n\n            const oldincrementalPatch = proto.incrementalPatch;\n            proto.incrementalPatch = function (this: RxDocument, patch: any) {\n                if (!this.collection.schema.jsonSchema.crdt) {\n                    return oldincrementalPatch.bind(this)(patch);\n                }\n                return this.updateCRDT({\n                    ifMatch: {\n                        $set: patch\n                    }\n                });\n            };\n            const oldincrementalModify = proto.incrementalModify;\n            proto.incrementalModify = function (fn: any, context: string) {\n                if (!this.collection.schema.jsonSchema.crdt) {\n                    return oldincrementalModify.bind(this)(fn);\n                }\n                if (context === RX_CRDT_CONTEXT) {\n                    return oldincrementalModify.bind(this)(fn);\n                } else {\n                    throw newRxError('CRDT2', {\n                        id: this.primary,\n                        args: { context }\n                    });\n                }\n            };\n        },\n        RxCollection: (proto: any) => {\n            proto.insertCRDT = insertCRDT;\n        }\n    },\n    overwritable: {},\n    hooks: {\n        preCreateRxCollection: {\n            after: (data) => {\n                if (!data.schema.crdt) {\n                    return;\n                }\n                if (data.conflictHandler) {\n                    throw newRxError('CRDT3', {\n                        collection: data.name,\n                        schema: data.schema\n                    });\n                }\n                data.conflictHandler = getCRDTConflictHandler(\n                    data.database.hashFunction,\n                    data.database.storage.statics,\n                    data.schema\n                );\n            }\n        },\n        createRxCollection: {\n            after: ({ collection }) => {\n                if (!collection.schema.jsonSchema.crdt) {\n                    return;\n                }\n\n                const crdtOptions = ensureNotFalsy(collection.schema.jsonSchema.crdt);\n                const crdtField = crdtOptions.field;\n                const getCrdt = objectPathMonad<any, CRDTDocumentField<any>>(crdtOptions.field);\n\n                /**\n                 * In dev-mode we have to ensure that all document writes\n                 * have the correct crdt state so that nothing is missed out\n                 * or could accidentally do non-crdt writes to the document.\n                 */\n                if (overwritable.isDevMode()) {\n                    const bulkWriteBefore = collection.storageInstance.bulkWrite.bind(collection.storageInstance);\n                    collection.storageInstance.bulkWrite = function (writes, context) {\n\n                        writes.forEach(write => {\n                            const newDocState: typeof write.document = clone(write.document);\n                            const crdts = getCrdt(newDocState);\n\n                            const rebuild = rebuildFromCRDT(\n                                collection.database.storage.statics,\n                                collection.schema.jsonSchema,\n                                newDocState,\n                                crdts\n                            );\n\n                            function docWithoutMeta(doc: any) {\n                                const ret: any = {};\n                                Object.entries(doc).forEach(([k, v]) => {\n                                    if (!k.startsWith('_')) {\n                                        ret[k] = v;\n                                    }\n                                });\n                                return ret;\n                            }\n                            if (!deepEqual(docWithoutMeta(newDocState), docWithoutMeta(rebuild))) {\n                                throw newRxError('SNH', {\n                                    document: newDocState\n                                });\n                            }\n                            const recalculatedHash = hashCRDTOperations(collection.database.hashFunction, crdts);\n                            if (crdts.hash !== recalculatedHash) {\n                                throw newRxError('SNH', {\n                                    document: newDocState,\n                                    args: { hash: crdts.hash, recalculatedHash }\n                                });\n                            }\n                        });\n\n                        return bulkWriteBefore(writes, context);\n                    };\n                }\n\n\n                const bulkInsertBefore = collection.bulkInsert.bind(collection);\n                collection.bulkInsert = async function (docsData: any[]) {\n                    const storageToken = await collection.database.storageToken;\n                    const useDocsData = docsData.map(docData => {\n                        const setMe: Partial<RxDocumentData<any>> = {};\n                        Object.entries(docData).forEach(([key, value]) => {\n                            if (\n                                !key.startsWith('_') &&\n                                key !== crdtField\n                            ) {\n                                setMe[key] = value;\n                            }\n                        });\n\n                        const crdtOperations: CRDTDocumentField<any> = {\n                            operations: [\n                                [{\n                                    creator: storageToken,\n                                    body: [{\n                                        ifMatch: {\n                                            $set: setMe\n                                        }\n                                    }],\n                                    time: now()\n                                }]\n                            ],\n                            hash: ''\n                        };\n                        crdtOperations.hash = hashCRDTOperations(collection.database.hashFunction, crdtOperations);\n                        setProperty(docData, crdtOptions.field, crdtOperations);\n                        return docData;\n                    });\n                    return bulkInsertBefore(useDocsData);\n                };\n            }\n        }\n    }\n};\n"],"mappings":"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"}