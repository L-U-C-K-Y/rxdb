{"version":3,"file":"remote.js","names":["filter","deepEqual","ensureNotFalsy","createAnswer","createErrorAnswer","exposeRxStorageRemote","settings","instanceByFullName","Map","messages$","pipe","msg","method","subscribe","connectionId","Array","isArray","params","fullName","databaseName","collectionName","schema","version","join","state","get","storageInstancePromise","storage","createStorageInstance","connectionIds","Set","set","err","send","Error","add","subs","storageInstance","push","changeStream","changes","message","answerTo","return","conflictResultionTasks","conflicts","subMsg","plainMessage","result","size","delete","forEach","sub","unsubscribe"],"sources":["../../../../src/plugins/storage-remote/remote.ts"],"sourcesContent":["import { filter, Subscription } from 'rxjs';\nimport type {\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from '../../types';\nimport {\n    deepEqual,\n    ensureNotFalsy\n} from '../../plugins/utils';\nimport { createAnswer, createErrorAnswer } from './storage-remote-helpers';\nimport type {\n    MessageFromRemote,\n    MessageToRemote,\n    RxStorageRemoteExposeSettings,\n    RxStorageRemoteExposeType\n} from './storage-remote-types';\n\n/**\n * Run this on the 'remote' part,\n * so that RxStorageMessageChannel can connect to it.\n */\nexport function exposeRxStorageRemote(settings: RxStorageRemoteExposeSettings): RxStorageRemoteExposeType {\n    type InstanceState = {\n        storageInstancePromise: Promise<RxStorageInstance<any, any, any>>;\n        connectionIds: Set<string>;\n        params: RxStorageInstanceCreationParams<any, any>;\n    };\n    const instanceByFullName: Map<string, InstanceState> = new Map();\n\n\n    settings.messages$.pipe(\n        filter(msg => msg.method === 'create')\n    ).subscribe(async (msg) => {\n        const connectionId = msg.connectionId;\n        /**\n         * Do an isArray check here\n         * for runtime check types to ensure we have\n         * instance creation params and not method input params.\n         */\n        if (Array.isArray(msg.params)) {\n            return;\n        }\n        const params = msg.params;\n        /**\n         * We de-duplicate the storage instances.\n         * This makes sense in many environments like\n         * electron where on main process contains the storage\n         * for multiple renderer processes. Same goes for SharedWorkers etc.\n         */\n        const fullName = [\n            params.databaseName,\n            params.collectionName,\n            params.schema.version\n        ].join('|');\n        let state = instanceByFullName.get(fullName);\n        if (!state) {\n            try {\n                state = {\n                    /**\n                     * We work with a promise here to ensure\n                     * that parallel create-calls will still end up\n                     * with exactly one instance and not more.\n                     */\n                    storageInstancePromise: settings.storage.createStorageInstance(params),\n                    connectionIds: new Set(),\n                    params\n                };\n                instanceByFullName.set(fullName, state);\n            } catch (err: any) {\n                settings.send(createErrorAnswer(msg, err));\n                return;\n            }\n        } else {\n            // if instance already existed, ensure that the schema is equal\n            if (!deepEqual(params.schema, state.params.schema)) {\n                settings.send(createErrorAnswer(msg, new Error('Remote storage: schema not equal to existing storage')));\n                return;\n            }\n        }\n        state.connectionIds.add(msg.connectionId);\n        const subs: Subscription[] = [];\n\n        const storageInstance = await state.storageInstancePromise;\n        /**\n         * Automatically subscribe to the changeStream()\n         * because we always need them.\n         */\n        subs.push(\n            storageInstance.changeStream().subscribe(changes => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'changestream',\n                    method: 'changeStream',\n                    return: changes\n                };\n                settings.send(message);\n            })\n        );\n        subs.push(\n            storageInstance.conflictResultionTasks().subscribe(conflicts => {\n                const message: MessageFromRemote = {\n                    connectionId,\n                    answerTo: 'conflictResultionTasks',\n                    method: 'conflictResultionTasks',\n                    return: conflicts\n                };\n                settings.send(message);\n            })\n        );\n        subs.push(\n            settings.messages$.pipe(\n                filter(subMsg => (subMsg as MessageToRemote).connectionId === connectionId)\n            ).subscribe(async (plainMessage) => {\n                const message: MessageToRemote = plainMessage as any;\n                if (message.method === 'create') {\n                    return;\n                }\n                if (!Array.isArray(message.params)) {\n                    return;\n                }\n                let result;\n                try {\n                    /**\n                     * On calls to 'close()',\n                     * we only close the main instance if there are no other\n                     * ports connected.\n                     */\n                    if (\n                        message.method === 'close' &&\n                        ensureNotFalsy(state).connectionIds.size > 1\n                    ) {\n                        settings.send(createAnswer(message, null));\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        subs.forEach(sub => sub.unsubscribe());\n                        return;\n                    }\n                    result = await (storageInstance as any)[message.method](\n                        message.params[0],\n                        message.params[1],\n                        message.params[2],\n                        message.params[3]\n                    );\n                    if (\n                        message.method === 'close' ||\n                        message.method === 'remove'\n                    ) {\n                        subs.forEach(sub => sub.unsubscribe());\n                        ensureNotFalsy(state).connectionIds.delete(connectionId);\n                        instanceByFullName.delete(fullName);\n                        /**\n                         * TODO how to notify the other ports on remove() ?\n                         */\n                    }\n                    settings.send(createAnswer(message, result));\n                } catch (err: any) {\n                    settings.send(createErrorAnswer(message, err));\n                }\n            })\n        );\n\n        settings.send(createAnswer(msg, 'ok'));\n    });\n\n    return {\n        instanceByFullName\n    };\n}\n"],"mappings":"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"}