{"version":3,"file":"index.js","names":["ensureNotFalsy","errorToPlainJson","fastUnsecureHash","flatClone","RxDBLeaderElectionPlugin","RxReplicationState","startReplicationOnLeaderShip","addRxPlugin","newRxError","Subject","couchDBDocToRxDocData","COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX","mergeUrlQueryParams","couchSwapPrimaryToId","getDefaultFetch","RxCouchDBReplicationState","url","fetch","replicationIdentifierHash","collection","pull","push","live","retryTime","autoStart","replicateCouchDB","options","endsWith","waitForLeadership","pullStream$","replicationPrimitivesPull","handler","lastPulledCheckpoint","batchSize","style","feed","include_docs","since","sequence","heartbeat","limit","seq_interval","response","replicationState","jsonResponse","json","documents","results","map","row","schema","primaryPath","doc","checkpoint","last_seq","modifier","stream$","asObservable","replicationPrimitivesPush","rows","body","docs","sendDoc","newDocumentState","assumedMasterState","_rev","method","headers","JSON","stringify","responseJson","conflicts","filter","isConflict","error","ok","args","length","getConflictDocsUrl","keys","c","id","conflictResponse","conflictResponseJson","conflictDocsMasterState","r","startBefore","start","bind","isStopped","err","promiseWait","next"],"sources":["../../../../src/plugins/replication-couchdb/index.ts"],"sourcesContent":["/**\n * This plugin can be used to sync collections with a remote CouchDB endpoint.\n */\nimport {\n    ensureNotFalsy,\n    errorToPlainJson,\n    fastUnsecureHash,\n    flatClone\n} from '../../plugins/utils';\n\nimport { RxDBLeaderElectionPlugin } from '../leader-election';\nimport type {\n    RxCollection,\n    ReplicationPullOptions,\n    ReplicationPushOptions,\n    RxReplicationWriteToMasterRow,\n    RxReplicationPullStreamItem,\n    CouchdbChangesResult,\n    CouchBulkDocResultRow,\n    CouchAllDocsResponse\n} from '../../types';\nimport {\n    RxReplicationState,\n    startReplicationOnLeaderShip\n} from '../replication';\nimport {\n    addRxPlugin,\n    newRxError,\n    WithDeleted\n} from '../../index';\n\nimport { Subject } from 'rxjs';\nimport type {\n    CouchDBCheckpointType,\n    FetchMethodType,\n    SyncOptionsCouchDB\n} from './couchdb-types';\nimport {\n    couchDBDocToRxDocData,\n    COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX,\n    mergeUrlQueryParams,\n    couchSwapPrimaryToId,\n    getDefaultFetch\n} from './couchdb-helper';\n\nexport * from './couchdb-helper';\nexport * from './couchdb-types';\n\nexport class RxCouchDBReplicationState<RxDocType> extends RxReplicationState<RxDocType, CouchDBCheckpointType> {\n    constructor(\n        public readonly url: string,\n        public fetch: FetchMethodType,\n        public readonly replicationIdentifierHash: string,\n        public readonly collection: RxCollection<RxDocType>,\n        public readonly pull?: ReplicationPullOptions<RxDocType, CouchDBCheckpointType>,\n        public readonly push?: ReplicationPushOptions<RxDocType>,\n        public readonly live: boolean = true,\n        public retryTime: number = 1000 * 5,\n        public autoStart: boolean = true\n    ) {\n        super(\n            replicationIdentifierHash,\n            collection,\n            '_deleted',\n            pull,\n            push,\n            live,\n            retryTime,\n            autoStart\n        );\n    }\n}\n\nexport function replicateCouchDB<RxDocType>(\n    options: SyncOptionsCouchDB<RxDocType>\n) {\n    const collection = options.collection;\n    addRxPlugin(RxDBLeaderElectionPlugin);\n\n    options = flatClone(options);\n    if (!options.url.endsWith('/')) {\n        options.url = options.url + '/';\n    }\n    options.waitForLeadership = typeof options.waitForLeadership === 'undefined' ? true : options.waitForLeadership;\n    const pullStream$: Subject<RxReplicationPullStreamItem<RxDocType, CouchDBCheckpointType>> = new Subject();\n    let replicationPrimitivesPull: ReplicationPullOptions<RxDocType, CouchDBCheckpointType> | undefined;\n    if (options.pull) {\n        replicationPrimitivesPull = {\n            async handler(\n                lastPulledCheckpoint: CouchDBCheckpointType | undefined,\n                batchSize: number\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/changes.html\n                 */\n                const url = options.url + '_changes?' + mergeUrlQueryParams({\n                    style: 'all_docs',\n                    feed: 'normal',\n                    include_docs: true,\n                    since: lastPulledCheckpoint ? lastPulledCheckpoint.sequence : 0,\n                    heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                    limit: batchSize,\n                    seq_interval: batchSize\n                });\n\n                const response = await replicationState.fetch(url);\n                const jsonResponse: CouchdbChangesResult = await response.json();\n                const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                    .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                return {\n                    documents,\n                    checkpoint: {\n                        sequence: jsonResponse.last_seq\n                    }\n                };\n            },\n            batchSize: ensureNotFalsy(options.pull).batchSize,\n            modifier: ensureNotFalsy(options.pull).modifier,\n            stream$: pullStream$.asObservable()\n        };\n    }\n\n    let replicationPrimitivesPush: ReplicationPushOptions<RxDocType> | undefined;\n    if (options.push) {\n        replicationPrimitivesPush = {\n            async handler(\n                rows: RxReplicationWriteToMasterRow<RxDocType>[]\n            ) {\n                /**\n                 * @link https://docs.couchdb.org/en/3.2.2-docs/api/database/bulk-api.html#db-bulk-docs\n                 */\n                const url = options.url + '_bulk_docs?' + mergeUrlQueryParams({});\n                const body = {\n                    docs: rows.map(row => {\n                        const sendDoc = flatClone(row.newDocumentState);\n                        if (row.assumedMasterState) {\n                            (sendDoc as any)._rev = ensureNotFalsy((row.assumedMasterState as any)._rev);\n                        }\n                        return couchSwapPrimaryToId(collection.schema.primaryPath, sendDoc);\n                    })\n                };\n\n                const response = await replicationState.fetch(\n                    url,\n                    {\n                        method: 'POST',\n                        headers: {\n                            'content-type': 'application/json'\n                        },\n                        body: JSON.stringify(body)\n                    }\n                );\n                const responseJson: CouchBulkDocResultRow[] = await response.json();\n\n                const conflicts = responseJson.filter(row => {\n                    const isConflict = row.error === 'conflict';\n                    if (!row.ok && !isConflict) {\n                        throw newRxError('SNH', { args: { row } });\n                    }\n                    return isConflict;\n                });\n\n                if (conflicts.length === 0) {\n                    return [];\n                }\n\n                const getConflictDocsUrl = options.url + '_all_docs?' + mergeUrlQueryParams({\n                    include_docs: true,\n                    keys: JSON.stringify(conflicts.map(c => c.id))\n                });\n                const conflictResponse = await replicationState.fetch(getConflictDocsUrl);\n                const conflictResponseJson: CouchAllDocsResponse = await conflictResponse.json();\n                const conflictDocsMasterState: WithDeleted<RxDocType>[] = conflictResponseJson.rows\n                    .map(r => couchDBDocToRxDocData(collection.schema.primaryPath, r.doc));\n\n                return conflictDocsMasterState;\n            },\n            batchSize: options.push.batchSize,\n            modifier: options.push.modifier\n        };\n    }\n\n    const replicationState = new RxCouchDBReplicationState<RxDocType>(\n        options.url,\n        options.fetch ? options.fetch : getDefaultFetch(),\n        COUCHDB_NEW_REPLICATION_PLUGIN_IDENTITY_PREFIX + fastUnsecureHash(options.url),\n        collection,\n        replicationPrimitivesPull,\n        replicationPrimitivesPush,\n        options.live,\n        options.retryTime,\n        options.autoStart\n    );\n\n    /**\n     * Use long polling to get live changes for the pull.stream$\n     */\n    if (options.live && options.pull) {\n        const startBefore = replicationState.start.bind(replicationState);\n        replicationState.start = () => {\n            let since: string | number = 'now';\n            const batchSize = options.pull && options.pull.batchSize ? options.pull.batchSize : 20;\n\n            (async () => {\n                while (!replicationState.isStopped()) {\n                    const url = options.url + '_changes?' + mergeUrlQueryParams({\n                        style: 'all_docs',\n                        feed: 'longpoll',\n                        since,\n                        include_docs: true,\n                        heartbeat: options.pull && options.pull.heartbeat ? options.pull.heartbeat : 60000,\n                        limit: batchSize,\n                        seq_interval: batchSize\n                    });\n\n                    let jsonResponse: CouchdbChangesResult;\n                    try {\n                        jsonResponse = await (await replicationState.fetch(url)).json();\n                    } catch (err: any) {\n                        pullStream$.error(newRxError('RC_STREAM', {\n                            args: { url },\n                            error: errorToPlainJson(err)\n                        }));\n                        // await next tick here otherwise we could go in to a 100% CPU blocking cycle.\n                        await collection.promiseWait(0);\n                        continue;\n                    }\n                    const documents: WithDeleted<RxDocType>[] = jsonResponse.results\n                        .map(row => couchDBDocToRxDocData(collection.schema.primaryPath, ensureNotFalsy(row.doc)));\n                    since = jsonResponse.last_seq;\n\n                    pullStream$.next({\n                        documents,\n                        checkpoint: {\n                            sequence: jsonResponse.last_seq\n                        }\n                    });\n                }\n            })();\n            return startBefore();\n        };\n    }\n\n    startReplicationOnLeaderShip(options.waitForLeadership, replicationState);\n\n    return replicationState;\n}\n"],"mappings":"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"}