{"version":3,"file":"data-migrator.js","names":["DataMigrator","newestCollection","migrationStrategies","_migrated","nonMigratedOldCollections","allOldCollections","currentSchema","schema","database","name","migrate","batchSize","newRxError","state","done","total","handled","success","deleted","percent","stateSubject","Subject","allSubject","getMigrationStateByDatabase","allList","getValue","slice","push","asObservable","next","_getOldCollections","then","ret","getAllDocuments","storageInstance","storage","getAllQueryPrepared","statics","prepareQuery","normalizeMangoQuery","queryResult","query","allDocs","documents","countAll","Promise","all","map","oldCol","jsonSchema","length","totalCount","reduce","cur","prev","collection","flatClone","currentCol","shift","currentPromise","PROMISE_RESOLVE_VOID","migrationState$","migrateOldCollection","res","sub","subscribe","subState","type","Math","round","error","e","unsubscribe","forEach","c","close","catch","complete","pipe","withCollection","migratePromise","_migratePromise","mustMigrate","must","PROMISE_RESOLVE_FALSE","rej","state$","err","createOldCollection","version","schemaObj","dataMigrator","storageInstanceCreationParams","databaseInstanceToken","token","databaseName","collectionName","options","instanceCreationOptions","multiInstance","runPluginHooks","createStorageInstance","createRxSchema","getWrappedStorageInstance","getOldCollectionDocs","collectionDocKeys","getPreviousVersions","internalStore","findDocumentsById","key","getPrimaryKeyOfInternalDocument","INTERNAL_CONTEXT_COLLECTION","docsObj","Object","values","oldColDocs","colDoc","data","filter","runStrategyIfNotNull","oldCollection","docOrNull","PROMISE_RESOLVE_NULL","retPromise","toPromise","getBatchOfOldCollection","preparedQuery","selector","sort","primaryPath","limit","skip","result","doc","migrateDocumentData","docData","attachmentsBefore","_attachments","mutateableDocData","clone","nextVersion","resolve","_meta","getDefaultRxDocumentMeta","isDocumentDataWithoutRevisionEqual","doc1","doc2","doc1NoRev","assign","undefined","_rev","doc2NoRev","deepEqual","_migrateDocuments","documentsData","runAsyncPluginHooks","migratedDocuments","bulkWriteToStorageInput","actions","idx","migratedDocData","action","migrated","createRevision","saveData","lwt","now","originalStorageInstance","bulkWrite","document","bulkDeleteInputData","writeDeleted","_deleted","previous","deleteOldCollection","remove","removeCollectionDoc","_migrate","observer","allBatchesDone","handleOneBatch","batch"],"sources":["../../../../src/plugins/migration/data-migrator.ts"],"sourcesContent":["/**\n * The DataMigrator handles the documents from collections with older schemas\n * and transforms/saves them into the newest collection\n */\n/**\n * TODO this should be completely rewritten because:\n * - This could have been done in much less code which would be easier to uderstand\n *\n */\nimport {\n    Subject,\n    Observable\n} from 'rxjs';\nimport {\n    clone,\n    toPromise,\n    flatClone,\n    createRevision,\n    PROMISE_RESOLVE_VOID,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_NULL,\n    getDefaultRxDocumentMeta,\n    now,\n    deepEqual\n} from '../../plugins/utils';\nimport {\n    createRxSchema\n} from '../../rx-schema';\nimport {\n    newRxError\n} from '../../rx-error';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from '../../hooks';\nimport type {\n    RxCollection,\n    RxDatabase,\n    MigrationState,\n    NumberFunctionMap,\n    OldRxCollection,\n    WithAttachmentsData,\n    RxJsonSchema,\n    RxDocumentData,\n    RxStorageInstanceCreationParams,\n    InternalStoreCollectionDocType,\n    RxStorageInstance\n} from '../../types';\nimport {\n    RxSchema,\n    getPreviousVersions\n} from '../../rx-schema';\nimport {\n    getMigrationStateByDatabase,\n    MigrationStateWithCollection\n} from './migration-state';\nimport { map } from 'rxjs/operators';\nimport {\n    getWrappedStorageInstance\n} from '../../rx-storage-helper';\nimport {\n    getPrimaryKeyOfInternalDocument,\n    INTERNAL_CONTEXT_COLLECTION\n} from '../../rx-database-internal-store';\nimport { normalizeMangoQuery } from '../../rx-query-helper';\n\nexport class DataMigrator {\n\n    constructor(\n        public newestCollection: RxCollection,\n        public migrationStrategies: NumberFunctionMap\n    ) {\n        this.currentSchema = newestCollection.schema;\n        this.database = newestCollection.database;\n        this.name = newestCollection.name;\n    }\n\n    public currentSchema: RxSchema;\n    public database: RxDatabase;\n    public name: string;\n\n\n    private _migrated: boolean = false;\n    private _migratePromise?: Promise<any>;\n    private nonMigratedOldCollections: OldRxCollection[] = [];\n    private allOldCollections: OldRxCollection[] = [];\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        if (this._migrated) {\n            throw newRxError('DM1');\n        }\n        this._migrated = true;\n\n        const state = {\n            done: false, // true if finished\n            total: 0, // will be the doc-count\n            handled: 0, // amount of handled docs\n            success: 0, // handled docs which succeeded\n            deleted: 0, // handled docs which got deleted\n            percent: 0 // percentage\n        };\n\n        const stateSubject: Subject<MigrationStateWithCollection> = new Subject();\n\n        /**\n         * Add to output of RxDatabase.migrationStates\n         */\n        const allSubject = getMigrationStateByDatabase(this.newestCollection.database);\n        const allList = allSubject.getValue().slice(0);\n        allList.push(stateSubject.asObservable());\n        allSubject.next(allList);\n\n        /**\n         * TODO this is a side-effect which might throw\n         * We did this because it is not possible to create new Observer(async(...))\n         * @link https://github.com/ReactiveX/rxjs/issues/4074\n         * In the future the whole migration plugin should be rewritten without rxjs\n         * so we do not have this problem.\n         */\n        (() => {\n            return _getOldCollections(this)\n                .then(ret => {\n                    this.nonMigratedOldCollections = ret;\n                    this.allOldCollections = this.nonMigratedOldCollections.slice(0);\n\n                    const getAllDocuments = async (\n                        storageInstance: RxStorageInstance<any, any, any>,\n                        schema: RxJsonSchema<any>\n                    ): Promise<RxDocumentData<any>[]> => {\n                        const storage = this.database.storage;\n                        const getAllQueryPrepared = storage.statics.prepareQuery(\n                            storageInstance.schema,\n                            normalizeMangoQuery(\n                                schema,\n                                {}\n                            )\n                        );\n                        const queryResult = await storageInstance.query(getAllQueryPrepared);\n                        const allDocs = queryResult.documents;\n                        return allDocs;\n                    };\n\n                    const countAll: Promise<number[]> = Promise.all(\n                        this.nonMigratedOldCollections\n                            .map(oldCol => getAllDocuments(\n                                oldCol.storageInstance,\n                                oldCol.schema.jsonSchema\n                            ).then(allDocs => allDocs.length))\n                    );\n                    return countAll;\n                })\n                .then(countAll => {\n                    const totalCount: number = countAll\n                        .reduce((cur, prev) => prev = cur + prev, 0);\n                    state.total = totalCount;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    let currentCol = this.nonMigratedOldCollections.shift();\n                    let currentPromise = PROMISE_RESOLVE_VOID;\n                    while (currentCol) {\n                        const migrationState$ = migrateOldCollection(\n                            currentCol,\n                            batchSize\n                        );\n                        currentPromise = currentPromise.then(() => {\n                            return new Promise(res => {\n                                const sub = migrationState$.subscribe({\n                                    next: (subState: any) => {\n                                        state.handled++;\n                                        (state as any)[subState.type] = (state as any)[subState.type] + 1;\n                                        state.percent = Math.round(state.handled / state.total * 100);\n                                        stateSubject.next({\n                                            collection: this.newestCollection,\n                                            state: flatClone(state)\n                                        });\n                                    },\n                                    error: (e: any) => {\n                                        sub.unsubscribe();\n                                        // TODO we should not have to catch here.\n                                        this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                        stateSubject.error(e);\n                                    },\n                                    complete: () => {\n                                        if (currentCol) {\n                                            // TODO we should not have to catch here.\n                                            currentCol.storageInstance.close().catch(() => { });\n                                        }\n                                        sub.unsubscribe();\n                                        res();\n                                    }\n                                });\n                            });\n                        });\n                        currentCol = this.nonMigratedOldCollections.shift();\n                    }\n                    return currentPromise;\n                })\n                .then(() => {\n                    state.done = true;\n                    state.percent = 100;\n                    stateSubject.next({\n                        collection: this.newestCollection,\n                        state: flatClone(state)\n                    });\n                    stateSubject.complete();\n                });\n        })();\n\n\n        return stateSubject.pipe(\n            map(withCollection => withCollection.state)\n        );\n    }\n\n    migratePromise(batchSize: number): Promise<any> {\n        if (!this._migratePromise) {\n            this._migratePromise = mustMigrate(this)\n                .then(must => {\n                    if (!must) {\n                        return PROMISE_RESOLVE_FALSE;\n                    } else {\n                        return new Promise((res, rej) => {\n                            const state$ = this.migrate(batchSize);\n                            (state$ as any).subscribe(null, rej, res);\n                            this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                        })\n                            .catch(err => {\n                                this.allOldCollections.forEach(c => c.storageInstance.close().catch(() => { }));\n                                throw err;\n                            });\n                    }\n                });\n        }\n        return this._migratePromise;\n    }\n}\n\nexport async function createOldCollection(\n    version: number,\n    schemaObj: RxJsonSchema<any>,\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection> {\n    const database = dataMigrator.newestCollection.database;\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: dataMigrator.newestCollection.name,\n        schema: schemaObj,\n        options: dataMigrator.newestCollection.instanceCreationOptions,\n        multiInstance: database.multiInstance\n    };\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    const storageInstance = await database.storage.createStorageInstance(\n        storageInstanceCreationParams\n    );\n    const ret: OldRxCollection = {\n        version,\n        dataMigrator,\n        newestCollection: dataMigrator.newestCollection,\n        database,\n        schema: createRxSchema(schemaObj, false),\n        storageInstance\n    };\n\n    ret.storageInstance = getWrappedStorageInstance(\n        ret.database,\n        storageInstance,\n        schemaObj\n    );\n\n    return ret;\n}\n\n\nexport function getOldCollectionDocs(\n    dataMigrator: DataMigrator\n): Promise<RxDocumentData<InternalStoreCollectionDocType>[]> {\n\n    const collectionDocKeys = getPreviousVersions(dataMigrator.currentSchema.jsonSchema)\n        .map(version => dataMigrator.name + '-' + version);\n\n    return dataMigrator.database.internalStore.findDocumentsById(\n        collectionDocKeys.map(key => getPrimaryKeyOfInternalDocument(\n            key,\n            INTERNAL_CONTEXT_COLLECTION\n        )),\n        false\n    ).then(docsObj => Object.values(docsObj));\n}\n\n/**\n * get an array with OldCollection-instances from all existing old storage-instances\n */\nexport async function _getOldCollections(\n    dataMigrator: DataMigrator\n): Promise<OldRxCollection[]> {\n    const oldColDocs = await getOldCollectionDocs(dataMigrator);\n\n    return Promise.all(\n        oldColDocs\n            .map(colDoc => {\n                if (!colDoc) {\n                    return null as any;\n                }\n                return createOldCollection(\n                    colDoc.data.schema.version,\n                    colDoc.data.schema,\n                    dataMigrator\n                );\n            })\n            .filter(colDoc => colDoc !== null)\n    );\n}\n\n\n/**\n * returns true if a migration is needed\n */\nexport function mustMigrate(dataMigrator: DataMigrator): Promise<boolean> {\n    if (dataMigrator.currentSchema.version === 0) {\n        return PROMISE_RESOLVE_FALSE;\n    }\n    return getOldCollectionDocs(dataMigrator)\n        .then(oldColDocs => {\n            if (oldColDocs.length === 0) {\n                return false;\n            } else {\n                return true;\n            }\n        });\n}\n\nexport function runStrategyIfNotNull(\n    oldCollection: OldRxCollection,\n    version: number,\n    docOrNull: any | null\n): Promise<any | null> {\n    if (docOrNull === null) {\n        return PROMISE_RESOLVE_NULL;\n    } else {\n        const ret = oldCollection.dataMigrator.migrationStrategies[version](docOrNull, oldCollection);\n        const retPromise = toPromise(ret);\n        return retPromise;\n    }\n}\n\nexport function getBatchOfOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize: number\n): Promise<any[]> {\n    const storage = oldCollection.database.storage;\n    const storageInstance = oldCollection.storageInstance;\n    const preparedQuery = storage.statics.prepareQuery(\n        storageInstance.schema,\n        {\n            selector: {},\n            sort: [{ [oldCollection.schema.primaryPath]: 'asc' } as any],\n            limit: batchSize,\n            skip: 0\n        }\n    );\n\n    return storageInstance\n        .query(preparedQuery)\n        .then(result => result.documents\n            .map(doc => {\n                doc = flatClone(doc);\n                return doc;\n            })\n        );\n}\n\n/**\n * runs the doc-data through all following migrationStrategies\n * so it will match the newest schema.\n * @throws Error if final doc does not match final schema or migrationStrategy crashes\n * @return final object or null if migrationStrategy deleted it\n */\nexport function migrateDocumentData(\n    oldCollection: OldRxCollection,\n    docData: any\n): Promise<any | null> {\n    /**\n     * We cannot deep-clone Blob or Buffer\n     * so we just flat clone it here\n     * and attach it to the deep cloned document data.\n     */\n    const attachmentsBefore = flatClone(docData._attachments);\n    const mutateableDocData = clone(docData);\n    mutateableDocData._attachments = attachmentsBefore;\n\n    let nextVersion = oldCollection.version + 1;\n\n    // run the document through migrationStrategies\n    let currentPromise = Promise.resolve(mutateableDocData);\n    while (nextVersion <= oldCollection.newestCollection.schema.version) {\n        const version = nextVersion;\n        currentPromise = currentPromise.then(docOrNull => runStrategyIfNotNull(\n            oldCollection,\n            version,\n            docOrNull\n        ));\n        nextVersion++;\n    }\n\n    return currentPromise.then(doc => {\n        if (doc === null) {\n            return PROMISE_RESOLVE_NULL;\n        }\n\n        /**\n         * Add _meta field if missing.\n         * We need this to migration documents from pre-12.0.0 state\n         * to version 12.0.0. Therefore we need to add the _meta field if it is missing.\n         * TODO remove this in the major version 13.0.0\n         */\n        if (!doc._meta) {\n            doc._meta = getDefaultRxDocumentMeta();\n        }\n        return doc;\n    });\n}\n\n\nexport function isDocumentDataWithoutRevisionEqual<T>(doc1: T, doc2: T): boolean {\n    const doc1NoRev = Object.assign({}, doc1, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    const doc2NoRev = Object.assign({}, doc2, {\n        _attachments: undefined,\n        _rev: undefined\n    });\n    return deepEqual(doc1NoRev, doc2NoRev);\n}\n\n/**\n * transform documents data and save them to the new collection\n * @return status-action with status and migrated document\n */\nexport async function _migrateDocuments(\n    oldCollection: OldRxCollection,\n    documentsData: any[]\n): Promise<{ type: string; doc: any; }[]> {\n\n    // run hooks that might mutate documentsData\n    await Promise.all(\n        documentsData.map(docData => runAsyncPluginHooks(\n            'preMigrateDocument',\n            {\n                docData,\n                oldCollection\n            }\n        ))\n    );\n    // run the migration strategies on each document\n    const migratedDocuments: (any | null)[] = await Promise.all(\n        documentsData.map(docData => migrateDocumentData(oldCollection, docData))\n    );\n\n\n    const bulkWriteToStorageInput: RxDocumentData<any>[] = [];\n    const actions: any[] = [];\n\n    documentsData.forEach((docData, idx) => {\n        const migratedDocData: any | null = migratedDocuments[idx];\n        const action = {\n            res: null as any,\n            type: '',\n            migrated: migratedDocData,\n            doc: docData,\n            oldCollection,\n            newestCollection: oldCollection.newestCollection\n        };\n        actions.push(action);\n\n        /**\n         * Determiniticly handle the revision\n         * so migrating the same data on multiple instances\n         * will result in the same output.\n         */\n        if (isDocumentDataWithoutRevisionEqual(docData, migratedDocData)) {\n            /**\n             * Data not changed by migration strategies, keep the same revision.\n             * This ensures that other replicated instances that did not migrate already\n             * will still have the same document.\n             */\n            migratedDocData._rev = docData._rev;\n        } else if (migratedDocData !== null) {\n            /**\n             * data changed, increase revision height\n             * so replicating instances use our new document data\n             */\n            migratedDocData._rev = createRevision(\n                oldCollection.newestCollection.database.token,\n                docData\n            );\n        }\n\n\n        if (migratedDocData) {\n            /**\n             * save to newest collection\n             * notice that this data also contains the attachments data\n             */\n            const attachmentsBefore = migratedDocData._attachments;\n            const saveData: WithAttachmentsData<any> = migratedDocData;\n            saveData._attachments = attachmentsBefore;\n            saveData._meta.lwt = now();\n            bulkWriteToStorageInput.push(saveData);\n            action.res = saveData;\n            action.type = 'success';\n        } else {\n            /**\n             * Migration strategy returned null\n             * which means we should not migrate this document,\n             * just drop it.\n             */\n            action.type = 'deleted';\n        }\n    });\n\n    /**\n     * Write the documents to the newest collection.\n     * We need to add as revision\n     * because we provide the _rev by our own\n     * to have deterministic revisions in case the migration\n     * runs on multiple nodes which must lead to the equal storage state.\n     */\n    if (bulkWriteToStorageInput.length) {\n        /**\n         * To ensure that we really keep that revision, we\n         * hackly insert this document via the RxStorageInstance.originalStorageInstance\n         * so that getWrappedStorageInstance() does not overwrite its own revision.\n         */\n        const originalStorageInstance: RxStorageInstance<any, any, any> = (oldCollection.newestCollection.storageInstance as any).originalStorageInstance;\n        await originalStorageInstance.bulkWrite(\n            bulkWriteToStorageInput.map(document => ({ document })),\n            'data-migrator-import'\n        );\n    }\n\n    // run hooks\n    await Promise.all(\n        actions.map(action => runAsyncPluginHooks(\n            'postMigrateDocument',\n            action\n        ))\n    );\n\n    // remove the documents from the old collection storage instance\n    const bulkDeleteInputData = documentsData.map(docData => {\n        const writeDeleted = flatClone(docData);\n        writeDeleted._deleted = true;\n        writeDeleted._attachments = {};\n        return {\n            previous: docData,\n            document: writeDeleted\n        };\n    });\n\n    if (bulkDeleteInputData.length) {\n        await oldCollection.storageInstance.bulkWrite(\n            bulkDeleteInputData,\n            'data-migrator-delete'\n        );\n    }\n\n    return actions;\n}\n\n\n/**\n * deletes this.storageInstance and removes it from the database.collectionsCollection\n */\nexport function deleteOldCollection(\n    oldCollection: OldRxCollection\n): Promise<void> {\n    return oldCollection.storageInstance.remove()\n        .then(\n            () => oldCollection.database.removeCollectionDoc(\n                oldCollection.dataMigrator.name,\n                oldCollection.schema\n            )\n        );\n}\n\n/**\n * runs the migration on all documents and deletes the storage instance afterwards\n */\nexport function migrateOldCollection(\n    oldCollection: OldRxCollection,\n    batchSize = 10\n): Observable<any> {\n    if (oldCollection._migrate) {\n        // already running\n        throw newRxError('DM3');\n    }\n    oldCollection._migrate = true;\n\n    const observer = new Subject();\n\n    /**\n     * TODO this is a side-effect which might throw\n     * @see DataMigrator.migrate()\n     */\n    (() => {\n        let error: any;\n        const allBatchesDone = () => {\n            // remove this oldCollection\n            return deleteOldCollection(oldCollection)\n                .then(() => observer.complete());\n        };\n        const handleOneBatch = () => {\n            return getBatchOfOldCollection(oldCollection, batchSize)\n                .then(batch => {\n                    if (batch.length === 0) {\n                        allBatchesDone();\n                        return false;\n                    } else {\n                        return _migrateDocuments(oldCollection, batch)\n                            .then((actions: any[]) => actions.forEach(action => observer.next(action)))\n                            .catch(e => error = e)\n                            .then(() => true);\n                    }\n                })\n                .then(next => {\n                    if (!next) {\n                        return;\n                    }\n                    if (error) {\n                        observer.error(error);\n                    } else {\n                        handleOneBatch();\n                    }\n                });\n        };\n        handleOneBatch();\n    })();\n\n    return observer.asObservable();\n}\n\nexport function migratePromise(\n    oldCollection: OldRxCollection,\n    batchSize?: number\n): Promise<any> {\n    if (!oldCollection._migratePromise) {\n        oldCollection._migratePromise = new Promise((res, rej) => {\n            const state$ = migrateOldCollection(oldCollection, batchSize);\n            (state$ as any).subscribe(null, rej, res);\n        });\n    }\n    return oldCollection._migratePromise;\n}\n"],"mappings":"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"}