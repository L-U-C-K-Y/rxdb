{"version":3,"file":"utils-blob-buffer.js","names":["blobBufferUtil","createBlobBuffer","data","type","blobBuffer","Blob","createBlobBufferFromBase64","base64String","base64Response","fetch","blob","isBlobBuffer","Buffer","isBuffer","toString","blobBufferType","Object","prototype","call","Promise","resolve","text","toBase64String","arrayBuffer","URL","createObjectURL","then","res","arrayBufferToBase64","size"],"sources":["../../../../src/plugins/utils/utils-blob-buffer.ts"],"sourcesContent":["import type {\n    BlobBuffer\n} from '../../types';\nimport { arrayBufferToBase64 } from './utils-base64';\n\n/**\n * This is an abstraction over the Blob/Buffer data structure.\n * We need this because it behaves different in different JavaScript runtimes.\n * Since RxDB 13.0.0 we switch to Blob-only because Node.js does not support\n * the Blob data structure which is also supported by the browsers.\n */\nexport const blobBufferUtil = {\n    /**\n     * depending if we are on node or browser,\n     * we have to use Buffer(node) or Blob(browser)\n     */\n    createBlobBuffer(\n        data: string,\n        type: string\n    ): BlobBuffer {\n        const blobBuffer = new Blob([data], {\n            type\n        });\n        return blobBuffer;\n    },\n    /**\n     * depending if we are on node or browser,\n     * we have to use Buffer(node) or Blob(browser)\n     */\n    async createBlobBufferFromBase64(\n        base64String: string,\n        type: string\n    ): Promise<BlobBuffer> {\n        const base64Response = await fetch(`data:${type};base64,${base64String}`);\n        const blob = await base64Response.blob();\n        return blob;\n\n    },\n    isBlobBuffer(data: any): boolean {\n        if (data instanceof Blob || (typeof Buffer !== 'undefined' && Buffer.isBuffer(data))) {\n            return true;\n        } else {\n            return false;\n        }\n    },\n    toString(blobBuffer: BlobBuffer | string): Promise<string> {\n        /**\n         * in the electron-renderer we have a typed array insteaf of a blob\n         * so we have to transform it.\n         * @link https://github.com/pubkey/rxdb/issues/1371\n         */\n        const blobBufferType = Object.prototype.toString.call(blobBuffer);\n        if (blobBufferType === '[object Uint8Array]') {\n            blobBuffer = new Blob([blobBuffer]);\n        }\n        if (typeof blobBuffer === 'string') {\n            return Promise.resolve(blobBuffer);\n        }\n\n        return (blobBuffer as Blob).text();\n    },\n    async toBase64String(blobBuffer: BlobBuffer | string): Promise<string> {\n        if (typeof blobBuffer === 'string') {\n            return blobBuffer;\n        }\n\n        /**\n         * in the electron-renderer we have a typed array insteaf of a blob\n         * so we have to transform it.\n         * @link https://github.com/pubkey/rxdb/issues/1371\n         */\n        const blobBufferType = Object.prototype.toString.call(blobBuffer);\n        if (blobBufferType === '[object Uint8Array]') {\n            blobBuffer = new Blob([blobBuffer]);\n        }\n\n        const arrayBuffer = await fetch(URL.createObjectURL(blobBuffer as Blob)).then(res => res.arrayBuffer());\n        return arrayBufferToBase64(arrayBuffer);\n    },\n    size(blobBuffer: BlobBuffer): number {\n        return (blobBuffer as Blob).size;\n    }\n};\n"],"mappings":";;;;;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,IAAMA,cAAc,GAAG;EAC1B;AACJ;AACA;AACA;EACIC,gBAAgB,CACZC,IAAY,EACZC,IAAY,EACF;IACV,IAAMC,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACH,IAAI,CAAC,EAAE;MAChCC;IACJ,CAAC,CAAC;IACF,OAAOC,UAAU;EACrB,CAAC;EACD;AACJ;AACA;AACA;EACI,MAAME,0BAA0B,CAC5BC,YAAoB,EACpBJ,IAAY,EACO;IACnB,IAAMK,cAAc,GAAG,MAAMC,KAAK,WAASN,IAAI,gBAAWI,YAAY,CAAG;IACzE,IAAMG,IAAI,GAAG,MAAMF,cAAc,CAACE,IAAI,EAAE;IACxC,OAAOA,IAAI;EAEf,CAAC;EACDC,YAAY,CAACT,IAAS,EAAW;IAC7B,IAAIA,IAAI,YAAYG,IAAI,IAAK,OAAOO,MAAM,KAAK,WAAW,IAAIA,MAAM,CAACC,QAAQ,CAACX,IAAI,CAAE,EAAE;MAClF,OAAO,IAAI;IACf,CAAC,MAAM;MACH,OAAO,KAAK;IAChB;EACJ,CAAC;EACDY,QAAQ,CAACV,UAA+B,EAAmB;IACvD;AACR;AACA;AACA;AACA;IACQ,IAAMW,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACH,QAAQ,CAACI,IAAI,CAACd,UAAU,CAAC;IACjE,IAAIW,cAAc,KAAK,qBAAqB,EAAE;MAC1CX,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACD,UAAU,CAAC,CAAC;IACvC;IACA,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAChC,OAAOe,OAAO,CAACC,OAAO,CAAChB,UAAU,CAAC;IACtC;IAEA,OAAQA,UAAU,CAAUiB,IAAI,EAAE;EACtC,CAAC;EACD,MAAMC,cAAc,CAAClB,UAA+B,EAAmB;IACnE,IAAI,OAAOA,UAAU,KAAK,QAAQ,EAAE;MAChC,OAAOA,UAAU;IACrB;;IAEA;AACR;AACA;AACA;AACA;IACQ,IAAMW,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACH,QAAQ,CAACI,IAAI,CAACd,UAAU,CAAC;IACjE,IAAIW,cAAc,KAAK,qBAAqB,EAAE;MAC1CX,UAAU,GAAG,IAAIC,IAAI,CAAC,CAACD,UAAU,CAAC,CAAC;IACvC;IAEA,IAAMmB,WAAW,GAAG,MAAMd,KAAK,CAACe,GAAG,CAACC,eAAe,CAACrB,UAAU,CAAS,CAAC,CAACsB,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACJ,WAAW,EAAE,CAAC;IACvG,OAAO,IAAAK,8BAAmB,EAACL,WAAW,CAAC;EAC3C,CAAC;EACDM,IAAI,CAACzB,UAAsB,EAAU;IACjC,OAAQA,UAAU,CAAUyB,IAAI;EACpC;AACJ,CAAC;AAAC"}