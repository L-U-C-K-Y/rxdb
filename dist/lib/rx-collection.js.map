{"version":3,"file":"rx-collection.js","names":["HOOKS_WHEN","HOOKS_KEYS","hooksApplied","RxCollectionBase","database","name","schema","internalStorageInstance","instanceCreationOptions","migrationStrategies","methods","attachments","options","cacheReplacementPolicy","defaultCacheReplacementPolicy","statics","conflictHandler","defaultConflictHandler","storageInstance","timeouts","Set","incrementalWriteQueue","_incrementalUpsertQueues","Map","synced","hooks","_subs","_docCache","_queryCache","createQueryCache","$","_changeEventBuffer","onDestroy","destroyed","_applyHookFunctions","asRxCollection","prepare","getWrappedStorageInstance","jsonSchema","IncrementalWriteQueue","primaryPath","newData","oldData","beforeDocumentUpdateWrite","result","_runHooks","eventBulks$","pipe","filter","changeEventBulk","collectionName","mergeMap","events","createChangeEventBuffer","DocumentCache","cE","isLocal","docData","createNewRxDocument","databaseStorageToken","storageToken","subDocs","changeStream","subscribe","eventBulk","id","internal","map","ev","storageChangeEventToRxChangeEvent","databaseToken","token","checkpoint","context","$emit","push","conflictResultionTasks","task","input","then","output","resolveConflictResultionTask","PROMISE_RESOLVE_VOID","migrationNeeded","pluginMissing","getDataMigrator","migrate","batchSize","migratePromise","insert","json","useJson","fillObjectDataBeforeInsert","writeResult","bulkInsert","isError","error","throwIfIsStorageWriteError","insertResult","ensureNotFalsy","success","docsData","length","useDocs","useDocData","docs","hasHooks","Promise","all","doc","docsMap","insertRows","set","Object","assign","_attachments","_meta","getDefaultRxDocumentMeta","_rev","getDefaultRevision","_deleted","row","document","results","bulkWrite","successDocData","values","rxDocuments","writtenDocData","getCachedRxDocument","get","primary","bulkRemove","ids","rxDocumentMap","findByIds","exec","Array","from","forEach","rxDocument","data","toMutableJSON","removeDocs","writeDoc","flatClone","previous","successIds","keys","getFromMapOrThrow","bulkUpsert","insertData","useJsonByDocId","newRxError","ret","slice","updatedDocs","status","collection","writeError","documentId","writeData","docDataInDb","documentInDb","newDoc","incrementalModify","concat","upsert","incrementalUpsert","queue","_incrementalUpsertEnsureRxDocumentExists","wasInserted","inserted","_incrementalUpsertUpdate","find","queryObj","_getDefaultQuery","query","createRxQuery","findOne","selector","limit","isArray","newRxTypeError","count","mangoQuery","$in","exportJSON","importJSON","_exportedJSON","insertCRDT","_updateObj","addHook","when","key","fun","parallel","includes","boundFun","bind","runName","series","getHooks","instance","tasks","hook","promiseSeries","_runHooksSync","promiseWait","time","res","timeout","setTimeout","delete","add","destroy","PROMISE_RESOLVE_FALSE","clearTimeout","requestIdlePromise","fn","close","sub","unsubscribe","collections","runAsyncPluginHooks","remove","removeCollectionStorages","storage","internalStore","hashFunction","operation","colProto","getPrototypeOf","fnName","ucfirst","_innerDoc","rxCollection","docDataFromCache","getLatestDocumentDataIfExists","resolve","createRxCollection","autoMigrate","localDocuments","storageInstanceCreationParams","databaseInstanceToken","databaseName","multiInstance","password","runPluginHooks","createRxCollectionStorageInstance","entries","funName","defineProperty","version","creator","catch","err","reject","isRxCollection","obj"],"sources":["../../src/rx-collection.ts"],"sourcesContent":["import {\n    filter,\n    mergeMap\n} from 'rxjs/operators';\n\nimport {\n    ucfirst,\n    flatClone,\n    promiseSeries,\n    pluginMissing,\n    ensureNotFalsy,\n    getFromMapOrThrow,\n    PROMISE_RESOLVE_FALSE,\n    PROMISE_RESOLVE_VOID,\n    getDefaultRxDocumentMeta,\n    getDefaultRevision\n} from './plugins/utils';\nimport {\n    fillObjectDataBeforeInsert,\n    createRxCollectionStorageInstance,\n    removeCollectionStorages\n} from './rx-collection-helper';\nimport {\n    createRxQuery,\n    _getDefaultQuery\n} from './rx-query';\nimport {\n    newRxError,\n    newRxTypeError\n} from './rx-error';\nimport type {\n    DataMigrator\n} from './plugins/migration';\nimport {\n    DocumentCache\n} from './doc-cache';\nimport {\n    QueryCache,\n    createQueryCache,\n    defaultCacheReplacementPolicy\n} from './query-cache';\nimport {\n    ChangeEventBuffer,\n    createChangeEventBuffer\n} from './change-event-buffer';\nimport {\n    runAsyncPluginHooks,\n    runPluginHooks\n} from './hooks';\n\nimport {\n    Subscription,\n    Observable\n} from 'rxjs';\n\nimport type {\n    KeyFunctionMap,\n    MigrationState,\n    RxCollection,\n    RxDatabase,\n    RxQuery,\n    RxDocument,\n    RxDumpCollection,\n    RxDumpCollectionAny,\n    MangoQuery,\n    MangoQueryNoLimit,\n    RxCacheReplacementPolicy,\n    RxStorageWriteError,\n    RxDocumentData,\n    RxDocumentWriteData,\n    RxStorageInstanceCreationParams,\n    BulkWriteRow,\n    RxChangeEvent,\n    RxChangeEventInsert,\n    RxChangeEventUpdate,\n    RxChangeEventDelete,\n    RxStorageInstance,\n    CollectionsOfDatabase,\n    RxChangeEventBulk,\n    RxLocalDocumentData,\n    RxDocumentBase,\n    RxConflictHandler,\n    MaybePromise,\n    CRDTEntry,\n    MangoQuerySelectorAndIndex\n} from './types';\n\nimport {\n    RxSchema\n} from './rx-schema';\n\nimport {\n    createNewRxDocument\n} from './rx-document-prototype-merge';\nimport {\n    getWrappedStorageInstance,\n    storageChangeEventToRxChangeEvent,\n    throwIfIsStorageWriteError,\n    WrappedRxStorageInstance\n} from './rx-storage-helper';\nimport { defaultConflictHandler } from './replication-protocol';\nimport { IncrementalWriteQueue } from './incremental-write';\nimport { beforeDocumentUpdateWrite } from './rx-document';\n\nconst HOOKS_WHEN = ['pre', 'post'] as const;\ntype HookWhenType = typeof HOOKS_WHEN[number];\nconst HOOKS_KEYS = ['insert', 'save', 'remove', 'create'] as const;\ntype HookKeyType = typeof HOOKS_KEYS[number];\nlet hooksApplied = false;\n\nexport class RxCollectionBase<\n    InstanceCreationOptions,\n    RxDocumentType = { [prop: string]: any; },\n    OrmMethods = {},\n    StaticMethods = { [key: string]: any; }\n> {\n\n\n    /**\n     * Stores all 'normal' documents\n     */\n    public storageInstance: WrappedRxStorageInstance<RxDocumentType, any, InstanceCreationOptions> = {} as any;\n    public readonly timeouts: Set<ReturnType<typeof setTimeout>> = new Set();\n    public incrementalWriteQueue: IncrementalWriteQueue<RxDocumentType> = {} as any;\n\n    constructor(\n        public database: RxDatabase<CollectionsOfDatabase, any, InstanceCreationOptions>,\n        public name: string,\n        public schema: RxSchema<RxDocumentType>,\n        public internalStorageInstance: RxStorageInstance<RxDocumentType, any, InstanceCreationOptions>,\n        public instanceCreationOptions: InstanceCreationOptions = {} as any,\n        public migrationStrategies: KeyFunctionMap = {},\n        public methods: KeyFunctionMap = {},\n        public attachments: KeyFunctionMap = {},\n        public options: any = {},\n        public cacheReplacementPolicy: RxCacheReplacementPolicy = defaultCacheReplacementPolicy,\n        public statics: KeyFunctionMap = {},\n        public conflictHandler: RxConflictHandler<RxDocumentType> = defaultConflictHandler\n    ) {\n        _applyHookFunctions(this.asRxCollection);\n    }\n\n    get insert$(): Observable<RxChangeEventInsert<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'INSERT')\n        ) as any;\n    }\n    get update$(): Observable<RxChangeEventUpdate<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'UPDATE')\n        ) as any;\n    }\n    get remove$(): Observable<RxChangeEventDelete<RxDocumentType>> {\n        return this.$.pipe(\n            filter(cE => cE.operation === 'DELETE')\n        ) as any;\n    }\n\n    public _incrementalUpsertQueues: Map<string, Promise<any>> = new Map();\n    // defaults\n    public synced: boolean = false;\n    public hooks: {\n        [key in HookKeyType]: {\n            [when in HookWhenType]: {\n                series: Function[];\n                parallel: Function[];\n            };\n        }\n    } = {} as any;\n    public _subs: Subscription[] = [];\n\n    public _docCache: DocumentCache<RxDocumentType, OrmMethods> = {} as any;\n\n    public _queryCache: QueryCache = createQueryCache();\n    public $: Observable<RxChangeEvent<RxDocumentType>> = {} as any;\n    public _changeEventBuffer: ChangeEventBuffer = {} as ChangeEventBuffer;\n\n\n\n    /**\n     * When the collection is destroyed,\n     * these functions will be called an awaited.\n     * Used to automatically clean up stuff that\n     * belongs to this collection.\n     */\n    public onDestroy: (() => MaybePromise<any>)[] = [];\n    public destroyed = false;\n\n    public async prepare(): Promise<void> {\n        this.storageInstance = getWrappedStorageInstance(\n            this.database,\n            this.internalStorageInstance,\n            this.schema.jsonSchema\n        );\n        this.incrementalWriteQueue = new IncrementalWriteQueue<RxDocumentType>(\n            this.storageInstance,\n            this.schema.primaryPath,\n            (newData, oldData) => beforeDocumentUpdateWrite(this as any, newData, oldData),\n            result => this._runHooks('post', 'save', result)\n        );\n\n        this.$ = this.database.eventBulks$.pipe(\n            filter(changeEventBulk => changeEventBulk.collectionName === this.name),\n            mergeMap(changeEventBulk => changeEventBulk.events),\n        );\n        this._changeEventBuffer = createChangeEventBuffer(this.asRxCollection);\n        this._docCache = new DocumentCache(\n            this.schema.primaryPath,\n            this.$.pipe(filter(cE => !cE.isLocal)),\n            docData => createNewRxDocument(this.asRxCollection, docData)\n        );\n\n        /**\n         * Instead of resolving the EventBulk array here and spit it into\n         * single events, we should fully work with event bulks internally\n         * to save performance.\n         */\n        const databaseStorageToken = await this.database.storageToken;\n        const subDocs = this.storageInstance.changeStream().subscribe(eventBulk => {\n            const changeEventBulk: RxChangeEventBulk<RxDocumentType | RxLocalDocumentData> = {\n                id: eventBulk.id,\n                internal: false,\n                collectionName: this.name,\n                storageToken: databaseStorageToken,\n                events: eventBulk.events.map(ev => storageChangeEventToRxChangeEvent(\n                    false,\n                    ev,\n                    this as any\n                )),\n                databaseToken: this.database.token,\n                checkpoint: eventBulk.checkpoint,\n                context: eventBulk.context\n            };\n            this.database.$emit(changeEventBulk);\n        });\n        this._subs.push(subDocs);\n\n        /**\n         * Resolve the conflict tasks\n         * of the RxStorageInstance\n         */\n        this._subs.push(\n            this.storageInstance\n                .conflictResultionTasks()\n                .subscribe(task => {\n                    this\n                        .conflictHandler(task.input, task.context)\n                        .then(output => {\n                            this.storageInstance.resolveConflictResultionTask({\n                                id: task.id,\n                                output\n                            });\n                        });\n                })\n        );\n\n        return PROMISE_RESOLVE_VOID;\n    }\n\n\n    // overwritte by migration-plugin\n    migrationNeeded(): Promise<boolean> {\n        throw pluginMissing('migration');\n    }\n    getDataMigrator(): DataMigrator {\n        throw pluginMissing('migration');\n    }\n    migrate(batchSize: number = 10): Observable<MigrationState> {\n        return this.getDataMigrator().migrate(batchSize);\n    }\n    migratePromise(batchSize: number = 10): Promise<any> {\n        return this.getDataMigrator().migratePromise(batchSize);\n    }\n\n    async insert(\n        json: RxDocumentType | RxDocument\n    ): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n\n        // TODO do we need fillObjectDataBeforeInsert() here because it is also run at bulkInsert() later\n        const useJson: RxDocumentWriteData<RxDocumentType> = fillObjectDataBeforeInsert(this.schema, json);\n\n        const writeResult = await this.bulkInsert([useJson]);\n\n        const isError = writeResult.error[0];\n        throwIfIsStorageWriteError(this as any, useJson[this.schema.primaryPath] as any, json, isError);\n        const insertResult = ensureNotFalsy(writeResult.success[0]);\n        return insertResult;\n    }\n\n    async bulkInsert(\n        docsData: RxDocumentType[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (docsData.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const useDocs = docsData.map(docData => {\n            const useDocData = fillObjectDataBeforeInsert(this.schema, docData);\n            return useDocData;\n        });\n        const docs = this.hasHooks('pre', 'insert') ?\n            await Promise.all(\n                useDocs.map(doc => {\n                    return this._runHooks('pre', 'insert', doc)\n                        .then(() => {\n                            return doc;\n                        });\n                })\n            ) : useDocs;\n        const docsMap: Map<string, RxDocumentType> = new Map();\n        const insertRows: BulkWriteRow<RxDocumentType>[] = docs.map(doc => {\n            docsMap.set((doc as any)[this.schema.primaryPath] as any, doc);\n            const docData = Object.assign(doc, {\n                _attachments: {},\n                _meta: getDefaultRxDocumentMeta(),\n                _rev: getDefaultRevision(),\n                _deleted: false\n            });\n            const row: BulkWriteRow<RxDocumentType> = { document: docData };\n            return row;\n        });\n        const results = await this.storageInstance.bulkWrite(\n            insertRows,\n            'rx-collection-bulk-insert'\n        );\n\n        // create documents\n        const successDocData: RxDocumentData<RxDocumentType>[] = Object.values(results.success);\n        const rxDocuments: any[] = successDocData\n            .map((writtenDocData) => this._docCache.getCachedRxDocument(writtenDocData));\n\n        if (this.hasHooks('post', 'insert')) {\n            await Promise.all(\n                rxDocuments.map(doc => {\n                    return this._runHooks(\n                        'post', 'insert',\n                        docsMap.get(doc.primary),\n                        doc\n                    );\n                })\n            );\n        }\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    async bulkRemove(\n        ids: string[]\n    ): Promise<{\n        success: RxDocument<RxDocumentType, OrmMethods>[];\n        error: RxStorageWriteError<RxDocumentType>[];\n    }> {\n        /**\n         * Optimization shortcut,\n         * do nothing when called with an empty array\n         */\n        if (ids.length === 0) {\n            return {\n                success: [],\n                error: []\n            };\n        }\n\n        const rxDocumentMap = await this.findByIds(ids).exec();\n        const docsData: RxDocumentData<RxDocumentType>[] = [];\n        const docsMap: Map<string, RxDocumentData<RxDocumentType>> = new Map();\n        Array.from(rxDocumentMap.values()).forEach(rxDocument => {\n            const data: RxDocumentData<RxDocumentType> = rxDocument.toMutableJSON(true) as any;\n            docsData.push(data);\n            docsMap.set(rxDocument.primary, data);\n        });\n\n        await Promise.all(\n            docsData.map(doc => {\n                const primary = (doc as any)[this.schema.primaryPath];\n                return this._runHooks('pre', 'remove', doc, rxDocumentMap.get(primary));\n            })\n        );\n        const removeDocs: BulkWriteRow<RxDocumentType>[] = docsData.map(doc => {\n            const writeDoc = flatClone(doc);\n            writeDoc._deleted = true;\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        const results = await this.storageInstance.bulkWrite(\n            removeDocs,\n            'rx-collection-bulk-remove'\n        );\n\n        const successIds: string[] = Object.keys(results.success);\n\n        // run hooks\n        await Promise.all(\n            successIds.map(id => {\n                return this._runHooks(\n                    'post',\n                    'remove',\n                    docsMap.get(id),\n                    rxDocumentMap.get(id)\n                );\n            })\n        );\n\n        const rxDocuments = successIds.map(id => getFromMapOrThrow(rxDocumentMap, id));\n\n        return {\n            success: rxDocuments,\n            error: Object.values(results.error)\n        };\n    }\n\n    /**\n     * same as bulkInsert but overwrites existing document with same primary\n     */\n    async bulkUpsert(docsData: Partial<RxDocumentType>[]): Promise<RxDocument<RxDocumentType, OrmMethods>[]> {\n        const insertData: RxDocumentType[] = [];\n        const useJsonByDocId: Map<string, RxDocumentType> = new Map();\n        docsData.forEach(docData => {\n            const useJson = fillObjectDataBeforeInsert(this.schema, docData);\n            const primary: string = useJson[this.schema.primaryPath] as any;\n            if (!primary) {\n                throw newRxError('COL3', {\n                    primaryPath: this.schema.primaryPath as string,\n                    data: useJson,\n                    schema: this.schema.jsonSchema\n                });\n            }\n            useJsonByDocId.set(primary, useJson);\n            insertData.push(useJson);\n        });\n\n        const insertResult = await this.bulkInsert(insertData);\n        let ret = insertResult.success.slice(0);\n        const updatedDocs = await Promise.all(\n            insertResult.error.map(async (error) => {\n                if (error.status !== 409) {\n                    throw newRxError('VD2', {\n                        collection: this.name,\n                        writeError: error\n                    });\n                }\n                const id = error.documentId;\n                const writeData = getFromMapOrThrow(useJsonByDocId, id);\n                const docDataInDb = ensureNotFalsy(error.documentInDb);\n                const doc = this._docCache.getCachedRxDocument(docDataInDb);\n                const newDoc = await doc.incrementalModify(() => writeData);\n                return newDoc;\n            })\n        );\n        ret = ret.concat(updatedDocs);\n        return ret;\n    }\n\n    /**\n     * same as insert but overwrites existing document with same primary\n     */\n    upsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        return this.bulkUpsert([json]).then(result => result[0]);\n    }\n\n    /**\n     * upserts to a RxDocument, uses incrementalModify if document already exists\n     */\n    incrementalUpsert(json: Partial<RxDocumentType>): Promise<RxDocument<RxDocumentType, OrmMethods>> {\n        const useJson = fillObjectDataBeforeInsert(this.schema, json);\n        const primary: string = useJson[this.schema.primaryPath] as any;\n        if (!primary) {\n            throw newRxError('COL4', {\n                data: json\n            });\n        }\n\n        // ensure that it won't try 2 parallel runs\n        let queue = this._incrementalUpsertQueues.get(primary);\n        if (!queue) {\n            queue = PROMISE_RESOLVE_VOID;\n        }\n        queue = queue\n            .then(() => _incrementalUpsertEnsureRxDocumentExists(this as any, primary as any, useJson))\n            .then((wasInserted) => {\n                if (!wasInserted.inserted) {\n                    return _incrementalUpsertUpdate(wasInserted.doc, useJson);\n                } else {\n                    return wasInserted.doc;\n                }\n            });\n        this._incrementalUpsertQueues.set(primary, queue);\n        return queue;\n    }\n\n    find(queryObj?: MangoQuery<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods>[]\n    > {\n        if (typeof queryObj === 'string') {\n            throw newRxError('COL5', {\n                queryObj\n            });\n        }\n\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n\n        const query = createRxQuery('find', queryObj, this as any);\n        return query as any;\n    }\n\n    findOne(\n        queryObj?: MangoQueryNoLimit<RxDocumentType> | string\n    ): RxQuery<\n        RxDocumentType,\n        RxDocument<RxDocumentType, OrmMethods> | null\n    > {\n        let query;\n\n        if (typeof queryObj === 'string') {\n            query = createRxQuery('findOne', {\n                selector: {\n                    [this.schema.primaryPath]: queryObj\n                },\n                limit: 1\n            }, this as any);\n        } else {\n            if (!queryObj) {\n                queryObj = _getDefaultQuery();\n            }\n\n            // cannot have limit on findOne queries because it will be overwritte\n            if ((queryObj as MangoQuery).limit) {\n                throw newRxError('QU6');\n            }\n\n            (queryObj as any).limit = 1;\n            query = createRxQuery<RxDocumentType>('findOne', queryObj, this as any);\n        }\n\n        if (\n            typeof queryObj === 'number' ||\n            Array.isArray(queryObj)\n        ) {\n            throw newRxTypeError('COL6', {\n                queryObj\n            });\n        }\n\n        return query as any;\n    }\n\n    count(queryObj?: MangoQuerySelectorAndIndex<RxDocumentType>): RxQuery<\n        RxDocumentType,\n        number\n    > {\n        if (!queryObj) {\n            queryObj = _getDefaultQuery();\n        }\n        const query = createRxQuery('count', queryObj, this as any);\n        return query as any;\n    }\n\n    /**\n     * find a list documents by their primary key\n     * has way better performance then running multiple findOne() or a find() with a complex $or-selected\n     */\n    findByIds(\n        ids: string[]\n    ): RxQuery<RxDocumentType, Map<string, RxDocument<RxDocumentType, OrmMethods>>> {\n        const mangoQuery: MangoQuery<RxDocumentType> = {\n            selector: {\n                [this.schema.primaryPath]: {\n                    $in: ids.slice(0)\n                }\n            } as any\n        };\n        const query = createRxQuery('findByIds', mangoQuery, this as any);\n        return query as any;\n    }\n\n    /**\n     * Export collection to a JSON friendly format.\n     */\n    exportJSON(): Promise<RxDumpCollection<RxDocumentType>>;\n    exportJSON(): Promise<RxDumpCollectionAny<RxDocumentType>>;\n    exportJSON(): Promise<any> {\n        throw pluginMissing('json-dump');\n    }\n\n    /**\n     * Import the parsed JSON export into the collection.\n     * @param _exportedJSON The previously exported data from the `<collection>.exportJSON()` method.\n     */\n    importJSON(_exportedJSON: RxDumpCollectionAny<RxDocumentType>): Promise<void> {\n        throw pluginMissing('json-dump');\n    }\n\n    insertCRDT(_updateObj: CRDTEntry<any> | CRDTEntry<any>[]): RxDocument<RxDocumentType, OrmMethods> {\n        throw pluginMissing('crdt');\n    }\n\n    /**\n     * HOOKS\n     */\n    addHook(when: HookWhenType, key: HookKeyType, fun: any, parallel = false) {\n        if (typeof fun !== 'function') {\n            throw newRxTypeError('COL7', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_WHEN.includes(when)) {\n            throw newRxTypeError('COL8', {\n                key,\n                when\n            });\n        }\n\n        if (!HOOKS_KEYS.includes(key)) {\n            throw newRxError('COL9', {\n                key\n            });\n        }\n\n        if (when === 'post' && key === 'create' && parallel === true) {\n            throw newRxError('COL10', {\n                when,\n                key,\n                parallel\n            });\n        }\n\n        // bind this-scope to hook-function\n        const boundFun = fun.bind(this);\n\n        const runName = parallel ? 'parallel' : 'series';\n\n        this.hooks[key] = this.hooks[key] || {};\n        this.hooks[key][when] = this.hooks[key][when] || {\n            series: [],\n            parallel: []\n        };\n        this.hooks[key][when][runName].push(boundFun);\n    }\n\n    getHooks(when: HookWhenType, key: HookKeyType) {\n        if (\n            !this.hooks[key] ||\n            !this.hooks[key][when]\n        ) {\n            return {\n                series: [],\n                parallel: []\n            };\n        }\n        return this.hooks[key][when];\n    }\n\n    hasHooks(when: HookWhenType, key: HookKeyType) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) {\n            return false;\n        }\n        return hooks.series.length > 0 || hooks.parallel.length > 0;\n    }\n\n    _runHooks(when: HookWhenType, key: HookKeyType, data: any, instance?: any): Promise<any> {\n        const hooks = this.getHooks(when, key);\n\n        if (!hooks) {\n            return PROMISE_RESOLVE_VOID;\n        }\n\n        // run parallel: false\n        const tasks = hooks.series.map((hook: any) => () => hook(data, instance));\n        return promiseSeries(tasks)\n            // run parallel: true\n            .then(() => Promise.all(\n                hooks.parallel\n                    .map((hook: any) => hook(data, instance))\n            ));\n    }\n\n    /**\n     * does the same as ._runHooks() but with non-async-functions\n     */\n    _runHooksSync(when: HookWhenType, key: HookKeyType, data: any, instance: any) {\n        const hooks = this.getHooks(when, key);\n        if (!hooks) return;\n        hooks.series.forEach((hook: any) => hook(data, instance));\n    }\n\n    /**\n     * Returns a promise that resolves after the given time.\n     * Ensures that is properly cleans up when the collection is destroyed\n     * so that no running timeouts prevent the exit of the JavaScript process.\n     */\n    promiseWait(time: number): Promise<void> {\n        const ret = new Promise<void>(res => {\n            const timeout = setTimeout(() => {\n                this.timeouts.delete(timeout);\n                res();\n            }, time);\n            this.timeouts.add(timeout);\n        });\n        return ret;\n    }\n\n    destroy(): Promise<boolean> {\n        if (this.destroyed) {\n            return PROMISE_RESOLVE_FALSE;\n        }\n\n        /**\n         * Settings destroyed = true\n         * must be the first thing to do,\n         * so for example the replication can directly stop\n         * instead of sending requests to a closed storage.\n         */\n        this.destroyed = true;\n\n\n        Array.from(this.timeouts).forEach(timeout => clearTimeout(timeout));\n        if (this._changeEventBuffer) {\n            this._changeEventBuffer.destroy();\n        }\n        /**\n         * First wait until the whole database is idle.\n         * This ensures that the storage does not get closed\n         * while some operation is running.\n         * It is important that we do not intercept a running call\n         * because it might lead to undefined behavior like when a doc is written\n         * but the change is not added to the changes collection.\n         */\n        return this.database.requestIdlePromise()\n            .then(() => Promise.all(this.onDestroy.map(fn => fn())))\n            .then(() => this.storageInstance.close())\n            .then(() => {\n                /**\n                 * Unsubscribing must be done AFTER the storageInstance.close()\n                 * Because the conflict handling is part of the subscriptions and\n                 * otherwise there might be open conflicts to be resolved which\n                 * will then stuck and never resolve.\n                 */\n                this._subs.forEach(sub => sub.unsubscribe());\n\n                delete this.database.collections[this.name];\n                return runAsyncPluginHooks('postDestroyRxCollection', this).then(() => true);\n            });\n    }\n\n    /**\n     * remove all data of the collection\n     */\n    async remove(): Promise<any> {\n        await this.destroy();\n        await removeCollectionStorages(\n            this.database.storage,\n            this.database.internalStore,\n            this.database.token,\n            this.database.name,\n            this.name,\n            this.database.hashFunction\n        );\n    }\n\n    get asRxCollection(): RxCollection<RxDocumentType, OrmMethods, StaticMethods> {\n        return this as any;\n    }\n}\n\n/**\n * adds the hook-functions to the collections prototype\n * this runs only once\n */\nfunction _applyHookFunctions(\n    collection: RxCollection<any, any>\n) {\n    if (hooksApplied) return; // already run\n    hooksApplied = true;\n    const colProto = Object.getPrototypeOf(collection);\n    HOOKS_KEYS.forEach(key => {\n        HOOKS_WHEN.map(when => {\n            const fnName = when + ucfirst(key);\n            colProto[fnName] = function (fun: string, parallel: boolean) {\n                return this.addHook(when, key, fun, parallel);\n            };\n        });\n    });\n}\n\nfunction _incrementalUpsertUpdate<RxDocType>(\n    doc: RxDocumentBase<RxDocType>,\n    json: RxDocumentData<RxDocType>\n): Promise<RxDocumentBase<RxDocType>> {\n    return doc.incrementalModify((_innerDoc) => {\n        return json;\n    });\n}\n\n/**\n * ensures that the given document exists\n * @return promise that resolves with new doc and flag if inserted\n */\nfunction _incrementalUpsertEnsureRxDocumentExists<RxDocType>(\n    rxCollection: RxCollection<RxDocType>,\n    primary: string,\n    json: any\n): Promise<\n    {\n        doc: RxDocument<RxDocType>;\n        inserted: boolean;\n    }\n> {\n    /**\n     * Optimisation shortcut,\n     * first try to find the document in the doc-cache\n     */\n    const docDataFromCache = rxCollection._docCache.getLatestDocumentDataIfExists(primary);\n    if (docDataFromCache) {\n        return Promise.resolve({\n            doc: rxCollection._docCache.getCachedRxDocument(docDataFromCache),\n            inserted: false\n        });\n    }\n    return rxCollection.findOne(primary).exec()\n        .then(doc => {\n            if (!doc) {\n                return rxCollection.insert(json).then(newDoc => ({\n                    doc: newDoc,\n                    inserted: true\n                }));\n            } else {\n                return {\n                    doc,\n                    inserted: false\n                };\n            }\n        });\n}\n\n/**\n * creates and prepares a new collection\n */\nexport function createRxCollection(\n    {\n        database,\n        name,\n        schema,\n        instanceCreationOptions = {},\n        migrationStrategies = {},\n        autoMigrate = true,\n        statics = {},\n        methods = {},\n        attachments = {},\n        options = {},\n        localDocuments = false,\n        cacheReplacementPolicy = defaultCacheReplacementPolicy,\n        conflictHandler = defaultConflictHandler\n    }: any\n): Promise<RxCollection> {\n    const storageInstanceCreationParams: RxStorageInstanceCreationParams<any, any> = {\n        databaseInstanceToken: database.token,\n        databaseName: database.name,\n        collectionName: name,\n        schema: schema.jsonSchema,\n        options: instanceCreationOptions,\n        multiInstance: database.multiInstance,\n        password: database.password\n    };\n\n    runPluginHooks(\n        'preCreateRxStorageInstance',\n        storageInstanceCreationParams\n    );\n\n    return createRxCollectionStorageInstance(\n        database,\n        storageInstanceCreationParams\n    ).then(storageInstance => {\n        const collection = new RxCollectionBase(\n            database,\n            name,\n            schema,\n            storageInstance,\n            instanceCreationOptions,\n            migrationStrategies,\n            methods,\n            attachments,\n            options,\n            cacheReplacementPolicy,\n            statics,\n            conflictHandler\n        );\n\n        return collection\n            .prepare()\n            .then(() => {\n                // ORM add statics\n                Object\n                    .entries(statics)\n                    .forEach(([funName, fun]) => {\n                        Object.defineProperty(collection, funName, {\n                            get: () => (fun as any).bind(collection)\n                        });\n                    });\n\n                let ret = PROMISE_RESOLVE_VOID;\n                if (autoMigrate && collection.schema.version !== 0) {\n                    ret = collection.migratePromise();\n                }\n                return ret;\n            })\n            .then(() => {\n                runPluginHooks('createRxCollection', {\n                    collection,\n                    creator: {\n                        name,\n                        schema,\n                        storageInstance,\n                        instanceCreationOptions,\n                        migrationStrategies,\n                        methods,\n                        attachments,\n                        options,\n                        cacheReplacementPolicy,\n                        localDocuments,\n                        statics\n                    }\n                });\n                return collection as any;\n            })\n            /**\n             * If the collection creation fails,\n             * we yet have to close the storage instances.\n             */\n            .catch(err => {\n                return storageInstance.close()\n                    .then(() => Promise.reject(err));\n            });\n    });\n}\n\nexport function isRxCollection(obj: any): boolean {\n    return obj instanceof RxCollectionBase;\n}\n"],"mappings":"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"}