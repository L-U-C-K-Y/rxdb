{"version":3,"file":"rx-collection-helper.js","names":["fillObjectDataBeforeInsert","schema","data","useJson","fillObjectWithDefaults","fillPrimaryKey","primaryPath","jsonSchema","_meta","getDefaultRxDocumentMeta","hasOwnProperty","_deleted","_attachments","_rev","getDefaultRevision","createRxCollectionStorageInstance","rxDatabase","storageInstanceCreationParams","multiInstance","storageInstance","storage","createStorageInstance","removeCollectionStorages","databaseInternalStorage","databaseInstanceToken","databaseName","collectionName","hashFunction","allCollectionMetaDocs","getAllCollectionDocuments","statics","relevantCollectionMetaDocs","filter","metaDoc","name","removeStorages","forEach","push","isCollection","connectedStorages","row","alreadyAdded","Set","key","version","has","add","Promise","all","map","options","remove","runAsyncPluginHooks","writeRows","doc","writeDoc","flatCloneDocWithMeta","lwt","now","createRevision","previous","document","bulkWrite"],"sources":["../../src/rx-collection-helper.ts"],"sourcesContent":["import type {\n    HashFunction,\n    InternalStoreDocType,\n    RxDatabase,\n    RxDocumentData,\n    RxJsonSchema,\n    RxStorage,\n    RxStorageInstance,\n    RxStorageInstanceCreationParams\n} from './types';\nimport {\n    createRevision,\n    getDefaultRevision,\n    getDefaultRxDocumentMeta,\n    now\n} from './plugins/utils';\nimport {\n    fillPrimaryKey\n} from './rx-schema-helper';\nimport type { RxSchema } from './rx-schema';\nimport { runAsyncPluginHooks } from './hooks';\nimport { getAllCollectionDocuments } from './rx-database-internal-store';\nimport { flatCloneDocWithMeta } from './rx-storage-helper';\n\n/**\n * fills in the default data.\n * This also clones the data.\n */\nexport function fillObjectDataBeforeInsert<RxDocType>(\n    schema: RxSchema<RxDocType>,\n    data: Partial<RxDocumentData<RxDocType>> | any\n): RxDocumentData<RxDocType> {\n    let useJson = schema.fillObjectWithDefaults(data);\n    useJson = fillPrimaryKey(\n        schema.primaryPath,\n        schema.jsonSchema,\n        useJson\n    );\n    useJson._meta = getDefaultRxDocumentMeta();\n    if (!useJson.hasOwnProperty('_deleted')) {\n        useJson._deleted = false;\n    }\n    if (!useJson.hasOwnProperty('_attachments')) {\n        useJson._attachments = {};\n    }\n    if (!useJson.hasOwnProperty('_rev')) {\n        useJson._rev = getDefaultRevision();\n    }\n    return useJson;\n}\n\n/**\n * Creates the storage instances that are used internally in the collection\n */\nexport async function createRxCollectionStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>(\n    rxDatabase: RxDatabase<{}, Internals, InstanceCreationOptions>,\n    storageInstanceCreationParams: RxStorageInstanceCreationParams<RxDocumentType, InstanceCreationOptions>\n): Promise<RxStorageInstance<RxDocumentType, Internals, InstanceCreationOptions>> {\n    storageInstanceCreationParams.multiInstance = rxDatabase.multiInstance;\n    const storageInstance = await rxDatabase.storage.createStorageInstance<RxDocumentType>(\n        storageInstanceCreationParams\n    );\n    return storageInstance;\n}\n\n/**\n * Removes the main storage of the collection\n * and all connected storages like the ones from the replication meta etc.\n */\nexport async function removeCollectionStorages(\n    storage: RxStorage<any, any>,\n    databaseInternalStorage: RxStorageInstance<InternalStoreDocType<any>, any, any>,\n    databaseInstanceToken: string,\n    databaseName: string,\n    collectionName: string,\n    /**\n     * If no hash function is provided,\n     * we assume that the whole internal store is removed anyway\n     * so we do not have to delete the meta documents.\n     */\n    hashFunction?: HashFunction,\n) {\n    const allCollectionMetaDocs = await getAllCollectionDocuments(\n        storage.statics,\n        databaseInternalStorage\n    );\n    const relevantCollectionMetaDocs = allCollectionMetaDocs\n        .filter(metaDoc => metaDoc.data.name === collectionName);\n\n    let removeStorages: {\n        collectionName: string;\n        schema: RxJsonSchema<any>;\n        isCollection: boolean;\n    }[] = [];\n    relevantCollectionMetaDocs.forEach(metaDoc => {\n        removeStorages.push({\n            collectionName: metaDoc.data.name,\n            schema: metaDoc.data.schema,\n            isCollection: true\n        });\n        metaDoc.data.connectedStorages.forEach(row => removeStorages.push({\n            collectionName: row.collectionName,\n            isCollection: false,\n            schema: row.schema\n        }));\n    });\n\n    // ensure uniqueness\n    const alreadyAdded = new Set<string>();\n    removeStorages = removeStorages.filter(row => {\n        const key = row.collectionName + '||' + row.schema.version;\n        if (alreadyAdded.has(key)) {\n            return false;\n        } else {\n            alreadyAdded.add(key);\n            return true;\n        }\n    });\n\n    // remove all the storages\n    await Promise.all(\n        removeStorages\n            .map(async (row) => {\n                const storageInstance = await storage.createStorageInstance<any>({\n                    collectionName: row.collectionName,\n                    databaseInstanceToken,\n                    databaseName,\n                    multiInstance: false,\n                    options: {},\n                    schema: row.schema\n                });\n                await storageInstance.remove();\n                if (row.isCollection) {\n                    await runAsyncPluginHooks('postRemoveRxCollection', {\n                        storage,\n                        databaseName: databaseName,\n                        collectionName\n                    });\n                }\n            })\n    );\n\n    // remove the meta documents\n    if (hashFunction) {\n        const writeRows = relevantCollectionMetaDocs.map(doc => {\n            const writeDoc = flatCloneDocWithMeta(doc);\n            writeDoc._deleted = true;\n            writeDoc._meta.lwt = now();\n            writeDoc._rev = createRevision(\n                databaseInstanceToken,\n                doc\n            );\n            return {\n                previous: doc,\n                document: writeDoc\n            };\n        });\n        await databaseInternalStorage.bulkWrite(\n            writeRows,\n            'rx-database-remove-collection-all'\n        );\n    }\n}\n"],"mappings":"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"}